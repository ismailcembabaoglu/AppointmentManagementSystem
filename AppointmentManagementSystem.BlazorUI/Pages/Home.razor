@page "/"
@using AppointmentManagementSystem.Application.DTOs
@using AppointmentManagementSystem.BlazorUI.Models
@using AppointmentManagementSystem.BlazorUI.Services.ApiServices
@using Radzen
@inject ICategoryApiService CategoryApiService
@inject IBusinessApiService BusinessApiService
@inject NotificationService NotificationService
@inject NavigationManager Navigation

<PageTitle>Ana Sayfa</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" Gap="24px">
    <!-- Hero Section -->
    <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
        <div class="text-center py-5">
            <h1 class="display-4">Appointment Management System</h1>
            <p class="lead">Profesyonel hizmetler için randevu oluşturun</p>
            <RadzenButton Text="İşletme Keşfet" ButtonStyle="ButtonStyle.Light" 
                        Click='() => Navigation.NavigateTo("/businesses")' Size="ButtonSize.Large" />
        </div>
    </RadzenCard>

    <!-- Kategoriler -->
    <RadzenCard>
        <h2>Popüler Kategoriler</h2>
        @if (categoriesLoading)
        {
            <div class="text-center">
                <RadzenLoader />
            </div>
        }
        else if (categories.Any())
        {
            <RadzenRow>
                @foreach (var category in categories.Take(6))
                {
                    <RadzenColumn Col="6" Sm="4" Md="2">
                        <RadzenCard class="text-center dashboard-card" Style="cursor: pointer;"
                                    Click="@(() => Navigation.NavigateTo($"/categories/{category.Id}/businesses"))">
                            @if (!string.IsNullOrEmpty(category.Icon))
                            {
                                <RadzenIcon Icon="@category.Icon" Style="font-size: 2rem;" />
                            }
                            else
                            {
                                <RadzenIcon Icon="category" Style="font-size: 2rem;" />
                            }
                            <div class="mt-2">
                                <h6>@category.Name</h6>
                                <small class="text-muted">@category.BusinessCount işletme</small>
                            </div>
                        </RadzenCard>
                    </RadzenColumn>
                }
            </RadzenRow>
        }
    </RadzenCard>

    <!-- Öne Çıkan İşletmeler -->
    <RadzenCard>
        <h2>Öne Çıkan İşletmeler</h2>
        @if (businessesLoading)
        {
            <div class="text-center">
                <RadzenLoader />
            </div>
        }
        else if (featuredBusinesses.Any())
        {
            <RadzenRow>
                @foreach (var business in featuredBusinesses.Take(3))
                {
                    <RadzenColumn Col="12" Md="4">
                        <RadzenCard class="dashboard-card h-100">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h5>@business.Name</h5>
                                    <p class="text-muted small">@business.CategoryName</p>
                                </div>
                                @if (business.AverageRating.HasValue && business.AverageRating > 0)
                                {
                                    <div class="text-end">
                                        <RadzenBadge Text="@business.AverageRating.Value.ToString("0.0")" BadgeStyle="BadgeStyle.Success" />
                                    </div>
                                }
                            </div>
                            
                            @if (!string.IsNullOrEmpty(business.Description))
                            {
                                <p>@business.Description.Substring(0, Math.Min(100, business.Description.Length))...</p>
                            }
                            
                            <div class="mt-3">
                                <RadzenButton Text="Detaylar" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" 
                                            Click="@(args => Navigation.NavigateTo($"/businesses/{business.Id}"))" />
                            </div>
                        </RadzenCard>
                    </RadzenColumn>
                }
            </RadzenRow>
        }
    </RadzenCard>
</RadzenStack>

@code {
    private List<CategoryDto> categories = new();
    private List<BusinessDto> featuredBusinesses = new();
    private bool categoriesLoading = true;
    private bool businessesLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadFeaturedBusinesses();
    }

    private async Task LoadCategories()
    {
        categoriesLoading = true;
        var response = await CategoryApiService.GetAllCategoriesAsync();
        if (response.Success)
        {
            categories = response.Data ?? new List<CategoryDto>();
        }
        categoriesLoading = false;
    }

    private async Task LoadFeaturedBusinesses()
    {
        businessesLoading = true;
        var response = await BusinessApiService.GetAllBusinessesAsync();
        if (response.Success)
        {
            // En yüksek puanlı işletmeleri seç
            featuredBusinesses = (response.Data ?? new List<BusinessDto>())
                .Where(b => b.AverageRating.HasValue && b.AverageRating > 4)
                .OrderByDescending(b => b.AverageRating)
                .ToList();
        }
        businessesLoading = false;
    }
}
