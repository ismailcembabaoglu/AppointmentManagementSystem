@page "/appointments"
@using AppointmentManagementSystem.Application.DTOs
@using AppointmentManagementSystem.BlazorUI.Models
@using AppointmentManagementSystem.BlazorUI.Services.ApiServices
@using Radzen
@using Microsoft.AspNetCore.Components.Authorization
@inject IAppointmentApiService AppointmentApiService
@inject IBusinessApiService BusinessApiService
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Randevularƒ±m</PageTitle>

<AuthorizeView>
    <Authorized>
        <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
            <!-- Header -->
            <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" Gap="16px">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                        <RadzenText TextStyle="TextStyle.H4" Style="margin: 0; font-weight: 600;">üìÖ Randevularƒ±m</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2" Style="opacity: 0.9;">
                            @if (userRole == "Business")
                            {
                                <text>ƒ∞≈ületmenize ait randevular</text>
                            }
                            else
                            {
                                <text>Aldƒ±ƒüƒ±nƒ±z randevular</text>
                            }
                        </RadzenText>
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>

            <!-- Filters -->
            <RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="12px" AlignItems="AlignItems.End">
                    @if (userRole == "Customer")
                    {
                        <div style="flex: 1; min-width: 200px;">
                            <RadzenLabel Text="ƒ∞≈ületme" />
                            <RadzenDropDown @bind-Value="selectedBusinessId"
                                          Data="@businessOptions"
                                          TextProperty="Text"
                                          ValueProperty="Value"
                                          Style="width: 100%;"
                                          Placeholder="T√ºm ƒ∞≈ületmeler" />
                        </div>
                    }

                    <div style="flex: 1; min-width: 200px;">
                        <RadzenLabel Text="Durum" />
                        <RadzenDropDown @bind-Value="selectedStatus"
                                      Data="@statusOptions"
                                      TextProperty="Text"
                                      ValueProperty="Value"
                                      Style="width: 100%;"
                                      Placeholder="T√ºm√º" />
                    </div>

                    <div style="flex: 1; min-width: 200px;">
                        <RadzenLabel Text="Sƒ±ralama" />
                        <RadzenDropDown @bind-Value="sortBy"
                                      Data="@sortOptions"
                                      TextProperty="Text"
                                      ValueProperty="Value"
                                      Style="width: 100%;" />
                    </div>

                    <RadzenButton Text="Filtrele" Icon="filter_list" ButtonStyle="ButtonStyle.Primary" Click="@ApplyFilters" />
                    <RadzenButton Text="Yenile" Icon="refresh" ButtonStyle="ButtonStyle.Light" Click="@LoadAppointments" />
                </RadzenStack>
            </RadzenCard>

            <!-- Appointments List -->
            @if (isLoading)
            {
                <RadzenCard Style="padding: 40px; text-align: center;">
                    <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                    <RadzenText TextStyle="TextStyle.Body1" Style="margin-top: 16px;">Randevular y√ºkleniyor...</RadzenText>
                </RadzenCard>
            }
            else if (!filteredAppointments.Any())
            {
                <RadzenCard Style="text-align: center; padding: 40px;">
                    <div style="font-size: 48px; opacity: 0.3;">üì≠</div>
                    <RadzenText TextStyle="TextStyle.H6" Style="margin-top: 16px; opacity: 0.7;">Randevu bulunamadƒ±</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="opacity: 0.5;">Hen√ºz bir randevu yok veya filtrelerinize uygun randevu bulunmuyor.</RadzenText>
                </RadzenCard>
            }
            else
            {
                <RadzenStack Orientation="Orientation.Vertical" Gap="16px">
                    @foreach (var appointment in filteredAppointments)
                    {
                        <RadzenCard Style="@($"border-left: 4px solid {GetStatusColor(appointment.Status)}; cursor: pointer; transition: all 0.3s ease;")"
                                   @onclick="@(() => ViewDetails(appointment.Id))"
                                   class="appointment-card">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="12px">
                                <!-- Header -->
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap" Gap="12px">
                                    <RadzenStack Orientation="Orientation.Vertical" Gap="4px" Style="flex: 1;">
                                        @if (userRole == "Business")
                                        {
                                            <RadzenText TextStyle="TextStyle.H6" Style="margin: 0; font-weight: 600;">üë§ @appointment.CustomerName</RadzenText>
                                        }
                                        else
                                        {
                                            <RadzenText TextStyle="TextStyle.H6" Style="margin: 0; font-weight: 600;">üè¢ @appointment.BusinessName</RadzenText>
                                        }
                                        <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">
                                            @appointment.ServiceName
                                        </RadzenText>
                                    </RadzenStack>

                                    <RadzenBadge Text="@GetStatusText(appointment.Status)"
                                               BadgeStyle="@GetStatusBadgeStyle(appointment.Status)"
                                               Style="font-size: 12px; padding: 6px 12px;" />
                                </RadzenStack>

                                <!-- Info Grid -->
                                <RadzenRow Gap="12px">
                                    <RadzenColumn Size="12" SizeSM="6" SizeMD="3">
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" AlignItems="AlignItems.Center">
                                            <RadzenIcon Icon="calendar_today" Style="color: var(--rz-primary);" />
                                            <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">Tarih</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600; margin: 0;">
                                                    @appointment.AppointmentDate.ToString("dd MMM yyyy")
                                                </RadzenText>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenColumn>

                                    <RadzenColumn Size="12" SizeSM="6" SizeMD="3">
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" AlignItems="AlignItems.Center">
                                            <RadzenIcon Icon="schedule" Style="color: var(--rz-primary);" />
                                            <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">Saat</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600; margin: 0;">
                                                    @($"{appointment.StartTime.Hours:00}:{appointment.StartTime.Minutes:00}")
                                                </RadzenText>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenColumn>

                                    @if (!string.IsNullOrEmpty(appointment.EmployeeName))
                                    {
                                        <RadzenColumn Size="12" SizeSM="6" SizeMD="3">
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" AlignItems="AlignItems.Center">
                                                <RadzenIcon Icon="person" Style="color: var(--rz-primary);" />
                                                <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">√áalƒ±≈üan</RadzenText>
                                                    <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600; margin: 0;">
                                                        @appointment.EmployeeName
                                                    </RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenColumn>
                                    }

                                    @if (appointment.Rating.HasValue)
                                    {
                                        <RadzenColumn Size="12" SizeSM="6" SizeMD="3">
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" AlignItems="AlignItems.Center">
                                                <RadzenIcon Icon="star" Style="color: #ffc107;" />
                                                <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">Deƒüerlendirme</RadzenText>
                                                    <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600; margin: 0;">
                                                        @appointment.Rating.Value.ToString("0.0") / 5.0
                                                    </RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenColumn>
                                    }
                                </RadzenRow>

                                <!-- Actions -->
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.End">
                                    <RadzenButton Text="Detay" Icon="visibility" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light"
                                                Click="@(() => ViewDetails(appointment.Id))" />

                                    @if (userRole == "Business" && appointment.Status == "Pending")
                                    {
                                        <RadzenButton Text="Onayla" Icon="check" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success"
                                                    Click="@(() => UpdateStatus(appointment.Id, "Confirmed"))" />
                                        <RadzenButton Text="Reddet" Icon="close" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger"
                                                    Click="@(() => UpdateStatus(appointment.Id, "Cancelled"))" />
                                    }

                                    @if (userRole == "Business" && appointment.Status == "Confirmed")
                                    {
                                        <RadzenButton Text="Tamamla" Icon="done_all" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info"
                                                    Click="@(() => UpdateStatus(appointment.Id, "Completed"))" />
                                    }

                                    @if (userRole == "Customer" && appointment.Status == "Completed" && !appointment.Rating.HasValue)
                                    {
                                        <RadzenButton Text="Deƒüerlendir" Icon="star" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning"
                                                    Click="@(() => ShowRatingDialog(appointment.Id))" />
                                    }

                                    @if (appointment.Status == "Pending" || appointment.Status == "Confirmed")
                                    {
                                        <RadzenButton Text="ƒ∞ptal" Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined"
                                                    Click="@(() => CancelAppointment(appointment.Id))" />
                                    }
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    }
                </RadzenStack>

                <!-- Stats Summary -->
                <RadzenCard Style="background: var(--rz-base-200);">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceAround" Wrap="FlexWrap.Wrap" Gap="16px">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="4px">
                            <RadzenText TextStyle="TextStyle.H4" Style="margin: 0; font-weight: 600; color: var(--rz-primary);">@appointments.Count</RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color);">Toplam</RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="4px">
                            <RadzenText TextStyle="TextStyle.H4" Style="margin: 0; font-weight: 600; color: #ffc107;">@appointments.Count(a => a.Status == "Pending")</RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color);">Bekliyor</RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="4px">
                            <RadzenText TextStyle="TextStyle.H4" Style="margin: 0; font-weight: 600; color: #2ecc71;">@appointments.Count(a => a.Status == "Confirmed")</RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color);">Onaylƒ±</RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="4px">
                            <RadzenText TextStyle="TextStyle.H4" Style="margin: 0; font-weight: 600; color: #3498db;">@appointments.Count(a => a.Status == "Completed")</RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color);">Tamamlandƒ±</RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            }
        </RadzenStack>

        <style>
            .appointment-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }
        </style>
    </Authorized>
    <NotAuthorized>
        <RadzenCard Style="text-align: center; padding: 60px 20px;">
            <div style="font-size: 64px; opacity: 0.3;">üîí</div>
            <RadzenText TextStyle="TextStyle.H5" Style="margin-top: 16px;">Yetkisiz Eri≈üim</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" Style="margin-top: 8px; color: var(--rz-text-secondary-color);">
                Randevularƒ±nƒ±zƒ± g√∂rmek i√ßin giri≈ü yapmanƒ±z gerekmektedir.
            </RadzenText>
            <RadzenButton Text="Giri≈ü Yap" Icon="login" ButtonStyle="ButtonStyle.Primary"
                        Click='() => Navigation.NavigateTo("/login")' Style="margin-top: 24px;" />
        </RadzenCard>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<AppointmentDto> appointments = new();
    private List<AppointmentDto> filteredAppointments = new();
    private bool isLoading = true;
    private int currentUserId = 0;
    private int? currentBusinessId = null;
    private string userRole = "";

    private string selectedStatus = "All";
    private int? selectedBusinessId = null;
    private string sortBy = "Date";

    // Business options for customer filter
    private List<BusinessOption> businessOptions = new();

    private List<StatusOption> statusOptions = new()
    {
        new StatusOption { Text = "T√ºm√º", Value = "All" },
        new StatusOption { Text = "Bekliyor", Value = "Pending" },
        new StatusOption { Text = "Onaylandƒ±", Value = "Confirmed" },
        new StatusOption { Text = "Tamamlandƒ±", Value = "Completed" },
        new StatusOption { Text = "ƒ∞ptal Edildi", Value = "Cancelled" }
    };

    private List<SortOption> sortOptions = new()
    {
        new SortOption { Text = "Tarihe G√∂re (Yeni)", Value = "Date" },
        new SortOption { Text = "Tarihe G√∂re (Eski)", Value = "DateOld" },
        new SortOption { Text = "Duruma G√∂re", Value = "Status" }
    };

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserInfo();
        await LoadAppointments();
        
        // Load businesses for customer filter
        if (userRole == "Customer")
        {
            await LoadBusinessOptions();
        }
    }

    private async Task GetCurrentUserInfo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Get user ID
            var userIdClaim = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)
                           ?? user.FindFirst("sub")
                           ?? user.FindFirst("userId")
                           ?? user.FindFirst("id");

            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var parsedId))
            {
                currentUserId = parsedId;
            }

            // Get role
            var roleClaim = user.FindFirst(System.Security.Claims.ClaimTypes.Role);
            if (roleClaim != null)
            {
                userRole = roleClaim.Value;
            }

            // If business, get business ID from token
            if (userRole == "Business")
            {
                var businessIdClaim = user.FindFirst("businessId");
                if (businessIdClaim != null && int.TryParse(businessIdClaim.Value, out var parsedBusinessId))
                {
                    currentBusinessId = parsedBusinessId;
                }
            }
        }
    }

    private async Task LoadBusinessOptions()
    {
        try
        {
            // M√º≈üterinin randevu aldƒ±ƒüƒ± i≈ületmeleri bul
            var uniqueBusinessIds = appointments
                .Where(a => a.BusinessId > 0)
                .Select(a => a.BusinessId)
                .Distinct()
                .ToList();

            // ƒ∞≈ületme bilgilerini al
            businessOptions = new List<BusinessOption>
            {
                new BusinessOption { Text = "T√ºm ƒ∞≈ületmeler", Value = null }
            };

            foreach (var businessId in uniqueBusinessIds)
            {
                var businessName = appointments.FirstOrDefault(a => a.BusinessId == businessId)?.BusinessName;
                if (!string.IsNullOrEmpty(businessName))
                {
                    businessOptions.Add(new BusinessOption
                    {
                        Text = businessName,
                        Value = businessId
                    });
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", $"ƒ∞≈ületmeler y√ºklenirken hata olu≈ütu: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        FilterAndSortAppointments();
    }

    private async Task LoadAppointments()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            ApiResponse<List<AppointmentDto>> response;

            if (userRole == "Business" && currentBusinessId.HasValue)
            {
                // Business users see only their business appointments
                response = await AppointmentApiService.GetAllAppointmentsAsync(businessId: currentBusinessId.Value);
            }
            else if (userRole == "Customer")
            {
                // Customers see only their own appointments
                response = await AppointmentApiService.GetAllAppointmentsAsync(customerId: currentUserId);
            }
            else
            {
                // Fallback - get all
                response = await AppointmentApiService.GetAllAppointmentsAsync();
            }

            if (response.Success)
            {
                appointments = response.Data ?? new List<AppointmentDto>();
                
                // Load business options for customer
                if (userRole == "Customer")
                {
                    await LoadBusinessOptions();
                }
                
                FilterAndSortAppointments();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hata", response.Message);
                appointments = new List<AppointmentDto>();
                filteredAppointments = new List<AppointmentDto>();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", $"Randevular y√ºklenirken hata olu≈ütu: {ex.Message}");
            appointments = new List<AppointmentDto>();
            filteredAppointments = new List<AppointmentDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterAndSortAppointments()
    {
        // Filter
        if (selectedStatus == "All")
        {
            filteredAppointments = new List<AppointmentDto>(appointments);
        }
        else
        {
            filteredAppointments = appointments.Where(a => a.Status == selectedStatus).ToList();
        }

        // Sort
        SortAppointments();
    }

    private void SortAppointments()
    {
        filteredAppointments = sortBy switch
        {
            "Date" => filteredAppointments.OrderByDescending(a => a.AppointmentDate).ThenByDescending(a => a.StartTime).ToList(),
            "DateOld" => filteredAppointments.OrderBy(a => a.AppointmentDate).ThenBy(a => a.StartTime).ToList(),
            "Status" => filteredAppointments.OrderBy(a => GetStatusOrder(a.Status)).ThenByDescending(a => a.AppointmentDate).ToList(),
            _ => filteredAppointments.OrderByDescending(a => a.AppointmentDate).ToList()
        };
        StateHasChanged();
    }

    private int GetStatusOrder(string status) => status switch
    {
        "Pending" => 1,
        "Confirmed" => 2,
        "Completed" => 3,
        "Cancelled" => 4,
        _ => 5
    };

    private void ViewDetails(int appointmentId)
    {
        Navigation.NavigateTo($"/appointments/{appointmentId}");
    }

    private async Task UpdateStatus(int appointmentId, string newStatus)
    {
        var confirmed = await DialogService.Confirm(
            $"Randevu durumunu '{GetStatusText(newStatus)}' olarak g√ºncellemek istediƒüinize emin misiniz?",
            "Durum G√ºncelle",
            new ConfirmOptions { OkButtonText = "Evet", CancelButtonText = "Hayƒ±r" });

        if (confirmed == true)
        {
            var response = await AppointmentApiService.UpdateAppointmentStatusAsync(appointmentId, newStatus);
            if (response.Success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Ba≈üarƒ±lƒ±", "Randevu durumu g√ºncellendi.");
                await LoadAppointments();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hata", response.Message);
            }
        }
    }

    private async Task CancelAppointment(int appointmentId)
    {
        var confirmed = await DialogService.Confirm(
            "Randevuyu iptal etmek istediƒüinize emin misiniz?",
            "Randevu ƒ∞ptali",
            new ConfirmOptions { OkButtonText = "Evet, ƒ∞ptal Et", CancelButtonText = "Hayƒ±r" });

        if (confirmed == true)
        {
            await UpdateStatus(appointmentId, "Cancelled");
        }
    }

    private async Task ShowRatingDialog(int appointmentId)
    {
        var parameters = new Dictionary<string, object>
        {
            { "AppointmentId", appointmentId }
        };

        var result = await DialogService.OpenAsync("Randevuyu Deƒüerlendir",
            ds =>
            @<div style="padding: 20px;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="16px">
                    <RadzenRating @bind-Value="@ratingValue" Stars="5" />
                    <RadzenTextArea @bind-Value="@reviewText" Placeholder="Yorumunuzu yazƒ±n (opsiyonel)" Rows="4" Style="width: 100%;" />
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" JustifyContent="JustifyContent.End">
                        <RadzenButton Text="ƒ∞ptal" ButtonStyle="ButtonStyle.Light" Click="() => ds.Close(false)" />
                        <RadzenButton Text="G√∂nder" ButtonStyle="ButtonStyle.Primary" Click="() => ds.Close(true)" />
                    </RadzenStack>
                </RadzenStack>
            </div>,
            new DialogOptions { Width = "500px", Height = "auto" });

        if (result == true && ratingValue > 0)
        {
            var ratingDto = new AddAppointmentRatingDto
            {
                Rating = ratingValue,
                Review = reviewText
            };

            var response = await AppointmentApiService.AddAppointmentRatingAsync(appointmentId, ratingDto);
            if (response.Success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Ba≈üarƒ±lƒ±", "Deƒüerlendirmeniz kaydedildi.");
                await LoadAppointments();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hata", response.Message);
            }
        }

        // Reset values
        ratingValue = 0;
        reviewText = "";
    }

    private int ratingValue = 0;
    private string reviewText = "";

    private string GetStatusColor(string status) => status switch
    {
        "Pending" => "#ffc107",
        "Confirmed" => "#2ecc71",
        "Completed" => "#3498db",
        "Cancelled" => "#e74c3c",
        _ => "#95a5a6"
    };

    private string GetStatusText(string status) => status switch
    {
        "Pending" => "Bekliyor",
        "Confirmed" => "Onaylandƒ±",
        "Completed" => "Tamamlandƒ±",
        "Cancelled" => "ƒ∞ptal Edildi",
        _ => status
    };

    private BadgeStyle GetStatusBadgeStyle(string status) => status switch
    {
        "Pending" => BadgeStyle.Warning,
        "Confirmed" => BadgeStyle.Success,
        "Completed" => BadgeStyle.Info,
        "Cancelled" => BadgeStyle.Danger,
        _ => BadgeStyle.Secondary
    };

    private class StatusOption
    {
        public string Text { get; set; } = "";
        public string Value { get; set; } = "";
    }

    private class SortOption
    {
        public string Text { get; set; } = "";
        public string Value { get; set; } = "";
    }
}
