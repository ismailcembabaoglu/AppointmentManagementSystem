@page "/register"
@using AppointmentManagementSystem.BlazorUI.Models
@using AppointmentManagementSystem.BlazorUI.Services
@using Radzen
@inject IApiService ApiService
@inject NotificationService NotificationService
@inject NavigationManager Navigation

<div class="auth-container">
    <RadzenCard class="auth-card mx-auto" Style="max-width: 450px; width: 90%; margin: 2rem auto;">
        <RadzenStack Orientation="Orientation.Vertical" Gap="24px">
            <div class="text-center">
                <RadzenIcon Icon="person_add" Style="font-size: 48px; color: var(--rz-success);" />
                <h2 class="mt-3">Kayıt Ol</h2>
                <p class="text-muted">Yeni bir hesap oluşturun</p>
            </div>

            <RadzenStack Orientation="Orientation.Vertical" Gap="16px">
                <RadzenTextBox Placeholder="Adınızı ve soyadınızı girin"
                               @bind-Value="registerDto.Name"
                               Icon="person" />
                @if (!string.IsNullOrEmpty(nameError))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Size="TextStyleSize.Small">@nameError</RadzenText>
                }

                <RadzenTextBox Placeholder="E-posta adresinizi girin"
                               @bind-Value="registerDto.Email"
                               Icon="email" />
                @if (!string.IsNullOrEmpty(emailError))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Size="TextStyleSize.Small">@emailError</RadzenText>
                }

                <RadzenPassword Placeholder="Şifrenizi girin"
                                @bind-Value="registerDto.Password"
                                Icon="lock" />
                @if (!string.IsNullOrEmpty(passwordError))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Size="TextStyleSize.Small">@passwordError</RadzenText>
                }

                <RadzenDropDown Placeholder="Rol seçiniz"
                                @bind-Value="registerDto.Role"
                                Data="@(new List<string> { "Customer", "Business" })"
                                Icon="work" />
                @if (!string.IsNullOrEmpty(roleError))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Size="TextStyleSize.Small">@roleError</RadzenText>
                }

                <RadzenButton Text="Kayıt Ol"
                              ButtonStyle="ButtonStyle.Success"
                              Click="@(async () => await HandleRegister())"
                              Icon="person_add"
                              Style="width: 100%;" />

                <div class="text-center">
                    <RadzenText>Zaten hesabınız var mı? <a href="/login" style="color: var(--rz-primary);">Giriş Yap</a></RadzenText>
                </div>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    private RegisterDto registerDto = new();
    private string nameError = "";
    private string emailError = "";
    private string passwordError = "";
    private string roleError = "";

    private async Task HandleRegister()
    {
        // Basic validation
        nameError = "";
        emailError = "";
        passwordError = "";
        roleError = "";

        if (string.IsNullOrWhiteSpace(registerDto.Name))
        {
            nameError = "Ad Soyad alanı gereklidir.";
            return;
        }

        if (string.IsNullOrWhiteSpace(registerDto.Email))
        {
            emailError = "E-posta alanı gereklidir.";
            return;
        }

        if (string.IsNullOrWhiteSpace(registerDto.Password))
        {
            passwordError = "Şifre alanı gereklidir.";
            return;
        }

        if (string.IsNullOrWhiteSpace(registerDto.Role))
        {
            roleError = "Rol seçimi gereklidir.";
            return;
        }

        var response = await ApiService.RegisterAsync(registerDto);

        if (response.Success)
        {
            NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Başarılı",
                Detail = response.Message,
                Duration = 4000
            });
            Navigation.NavigateTo("/login");
        }
        else
        {
            var errorMessage = response.Errors.Any() ? string.Join(", ", response.Errors) : response.Message;
            NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Hata",
                Detail = errorMessage,
                Duration = 4000
            });
        }
    }
}
