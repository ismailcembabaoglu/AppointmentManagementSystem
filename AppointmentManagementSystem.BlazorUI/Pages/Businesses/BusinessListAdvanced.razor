@page "/businesses"
@page "/businesses/category/{CategoryId:int}"
@using AppointmentManagementSystem.Application.DTOs
@using AppointmentManagementSystem.BlazorUI.Models
@using AppointmentManagementSystem.BlazorUI.Services.ApiServices
@using Radzen
@inject IBusinessApiService BusinessApiService
@inject ICategoryApiService CategoryApiService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageTitle>ƒ∞≈ületmeler</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" Gap="20px" Style="padding: 16px;">
    <!-- Header -->
    <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" Gap="16px">
            <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                <RadzenText TextStyle="TextStyle.H4" Style="margin: 0; font-weight: 700;">üè¢ ƒ∞≈ületmeler</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Style="opacity: 0.95; margin: 0;">@filteredBusinesses.Count i≈ületme bulundu</RadzenText>
            </RadzenStack>
            <RadzenButton Icon="arrow_back" Text="Kategoriler" ButtonStyle="ButtonStyle.Light" 
                         Click="@(() => Navigation.NavigateTo("/categories"))" />
        </RadzenStack>
    </RadzenCard>

    <!-- Filters Card -->
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.H6" Style="margin: 0 0 16px 0; font-weight: 600;">üîç Filtreler</RadzenText>
        <RadzenStack Orientation="Orientation.Vertical" Gap="16px">
            <!-- Search -->
            <RadzenTextBox @bind-Value="searchTerm" Placeholder="ƒ∞≈ületme ara..." Style="width: 100%;" @oninput="@(args => ApplyFilters())" />
            
            <RadzenRow Gap="16px">
                <!-- Category -->
                <RadzenColumn Size="12" SizeSM="6" SizeMD="3">
                    <RadzenLabel Text="Kategori" />
                    <RadzenDropDown @bind-Value="selectedCategoryId" Data="@categories" TextProperty="Name" ValueProperty="Id" 
                                  Placeholder="T√ºm Kategoriler" Style="width: 100%;" Change="@(() => ApplyFilters())" AllowClear="true" />
                </RadzenColumn>

                <!-- City -->
                <RadzenColumn Size="12" SizeSM="6" SizeMD="3">
                    <RadzenLabel Text="ƒ∞l" />
                    <RadzenDropDown @bind-Value="selectedCity" Data="@cities" Placeholder="T√ºm ƒ∞ller" Style="width: 100%;" 
                                  Change="@(() => { selectedDistrict = null; LoadDistricts(); ApplyFilters(); })" AllowClear="true" AllowFiltering="true" />
                </RadzenColumn>

                <!-- District -->
                <RadzenColumn Size="12" SizeSM="6" SizeMD="3">
                    <RadzenLabel Text="ƒ∞l√ße" />
                    <RadzenDropDown @bind-Value="selectedDistrict" Data="@districts" Placeholder="T√ºm ƒ∞l√ßeler" Style="width: 100%;" 
                                  Disabled="@(string.IsNullOrEmpty(selectedCity))" Change="@(() => ApplyFilters())" AllowClear="true" AllowFiltering="true" />
                </RadzenColumn>

                <!-- Service Type -->
                <RadzenColumn Size="12" SizeSM="6" SizeMD="3">
                    <RadzenLabel Text="Hizmet T√ºr√º" />
                    <RadzenDropDown @bind-Value="selectedServiceType" Data="@serviceTypes" Placeholder="T√ºm Hizmetler" Style="width: 100%;" 
                                  Change="@(() => ApplyFilters())" AllowClear="true" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow Gap="16px">
                <!-- Price Range -->
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenLabel Text="@($"Fiyat Aralƒ±ƒüƒ±: {minPrice}‚Ç∫ - {maxPrice}‚Ç∫")" />
                    <RadzenSlider @bind-Value="@minPrice" Min="0" Max="5000" Step="50" Style="width: 100%;" Change="@((int args) => ApplyFilters())" />
                    <RadzenSlider @bind-Value="@maxPrice" Min="0" Max="5000" Step="50" Style="width: 100%; margin-top: 8px;" Change="@((int args) => ApplyFilters())" />
                </RadzenColumn>

                <!-- Distance -->
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenLabel Text="@($"Mesafe: {maxDistance} km")" />
                    <RadzenSlider @bind-Value="@maxDistance" Min="0" Max="50" Step="5" Style="width: 100%;" Change="@((int args) => ApplyFilters())" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenButton Text="Filtreleri Temizle" Icon="clear" ButtonStyle="ButtonStyle.Light" Click="ClearFilters" />
        </RadzenStack>
    </RadzenCard>

    <!-- Business List -->
    @if (isLoading)
    {
        <RadzenCard Style="min-height: 400px; display: flex; align-items: center; justify-content: center;">
            <RadzenStack Orientation="Orientation.Vertical" Gap="16px" AlignItems="AlignItems.Center">
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                <RadzenText TextStyle="TextStyle.H6">ƒ∞≈ületmeler y√ºkleniyor...</RadzenText>
            </RadzenStack>
        </RadzenCard>
    }
    else if (filteredBusinesses.Any())
    {
        <div class="businesses-grid">
            @foreach (var business in filteredBusinesses)
            {
                <RadzenCard class="business-card" @onclick="@(() => NavigateToDetail(business.Id))">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="12px">
                        @if (business.PhotoUrls != null && business.PhotoUrls.Any())
                        {
                            <div class="business-image">
                                <img src="@business.PhotoUrls.First()" alt="@business.Name" />
                            </div>
                        }
                        else
                        {
                            <div class="business-image-placeholder">
                                <RadzenText TextStyle="TextStyle.DisplayH2" Style="color: white; margin: 0;">@business.Name.Substring(0, 1).ToUpper()</RadzenText>
                            </div>
                        }
                        
                        <RadzenStack Orientation="Orientation.Vertical" Gap="8px">
                            <RadzenText TextStyle="TextStyle.H6" Style="margin: 0; font-weight: 600;">@business.Name</RadzenText>
                            
                            @if (!string.IsNullOrEmpty(business.Description))
                            {
                                <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color); margin: 0; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">
                                    @business.Description
                                </RadzenText>
                            }
                            
                            @if (!string.IsNullOrEmpty(business.City))
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" AlignItems="AlignItems.Center">
                                    <RadzenIcon Icon="location_on" Style="font-size: 16px; color: var(--rz-text-secondary-color);" />
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">
                                        @business.City @(!string.IsNullOrEmpty(business.District) ? $", {business.District}" : "")
                                    </RadzenText>
                                </RadzenStack>
                            }
                            
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" AlignItems="AlignItems.Center">
                                <RadzenIcon Icon="star" Style="font-size: 16px; color: #fbbf24;" />
                                <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600; margin: 0;">4.5</RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">(124)</RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            }
        </div>
    }
    else
    {
        <RadzenCard Style="min-height: 300px; display: flex; align-items: center; justify-content: center;">
            <RadzenStack Orientation="Orientation.Vertical" Gap="16px" AlignItems="AlignItems.Center">
                <RadzenIcon Icon="business" Style="font-size: 64px; color: var(--rz-text-disabled-color);" />
                <RadzenText TextStyle="TextStyle.H6" Style="color: var(--rz-text-secondary-color);">Filtrelerinize uygun i≈ületme bulunamadƒ±</RadzenText>
                <RadzenButton Text="Filtreleri Temizle" ButtonStyle="ButtonStyle.Primary" Click="ClearFilters" />
            </RadzenStack>
        </RadzenCard>
    }
</RadzenStack>

<style>
    .businesses-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 16px;
    }

    .business-card {
        cursor: pointer;
        transition: all 0.3s ease;
        height: 100%;
    }

    .business-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.15) !important;
    }

    .business-image, .business-image-placeholder {
        width: 100%;
        height: 200px;
        border-radius: 8px;
        overflow: hidden;
    }

    .business-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .business-image-placeholder {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    @@media (max-width: 768px) {
        .businesses-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    [Parameter]
    public int? CategoryId { get; set; }

    private List<BusinessDto> allBusinesses = new();
    private List<BusinessDto> filteredBusinesses = new();
    private List<CategoryDto> categories = new();
    private bool isLoading = true;

    // Filters
    private string searchTerm = "";
    private int? selectedCategoryId = null;
    private string? selectedCity = null;
    private string? selectedDistrict = null;
    private string? selectedServiceType = null;
    private int minPrice = 0;
    private int maxPrice = 5000;
    private int maxDistance = 50;

    private List<string> cities = new() { "ƒ∞stanbul", "Ankara", "ƒ∞zmir", "Bursa", "Antalya", "Adana", "Konya", "Gaziantep" };
    private List<string> districts = new();
    private List<string> serviceTypes = new() { "Kuaf√∂r", "Berber", "G√ºzellik", "Masaj", "Spa", "Manik√ºr", "Pedik√ºr" };

    protected override async Task OnInitializedAsync()
    {
        selectedCategoryId = CategoryId;
        await LoadCategories();
        await LoadBusinesses();
    }

    private async Task LoadCategories()
    {
        var response = await CategoryApiService.GetAllCategoriesAsync();
        if (response.Success)
        {
            categories = response.Data ?? new List<CategoryDto>();
        }
    }

    private async Task LoadBusinesses()
    {
        isLoading = true;
        
        var response = await BusinessApiService.GetAllBusinessesAsync(selectedCategoryId);
        if (response.Success)
        {
            allBusinesses = response.Data ?? new List<BusinessDto>();
            ApplyFilters();
        }
        
        isLoading = false;
    }

    private void LoadDistricts()
    {
        districts = selectedCity switch
        {
            "ƒ∞stanbul" => new List<string> { "Kadƒ±k√∂y", "Be≈üikta≈ü", "≈ûi≈üli", "√úsk√ºdar", "Beyoƒülu" },
            "Ankara" => new List<string> { "√áankaya", "Ke√ßi√∂ren", "Yenimahalle", "Mamak" },
            "ƒ∞zmir" => new List<string> { "Konak", "Kar≈üƒ±yaka", "Bornova", "Buca" },
            _ => new List<string>()
        };
    }

    private void ApplyFilters()
    {
        filteredBusinesses = allBusinesses.Where(b =>
        {
            if (!string.IsNullOrEmpty(searchTerm) && 
                !b.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) &&
                !(b.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                return false;

            if (selectedCategoryId.HasValue && b.CategoryId != selectedCategoryId.Value)
                return false;

            if (!string.IsNullOrEmpty(selectedCity) && b.City != selectedCity)
                return false;

            if (!string.IsNullOrEmpty(selectedDistrict) && b.District != selectedDistrict)
                return false;

            return true;
        }).ToList();

        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedCategoryId = CategoryId;
        selectedCity = null;
        selectedDistrict = null;
        selectedServiceType = null;
        minPrice = 0;
        maxPrice = 5000;
        maxDistance = 50;
        ApplyFilters();
    }

    private void NavigateToDetail(int businessId)
    {
        Navigation.NavigateTo($"/business/{businessId}");
    }
}