@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime

<div style="display: flex; flex-direction: column; gap: 8px;">
    <RadzenButton Text="@ButtonText"
                 ButtonStyle="ButtonStyle.Primary"
                 Size="ButtonSize.Medium"
                 Icon="upload"
                 ButtonType="ButtonType.Button"
                 Click="@OpenFileDialog" />

    <InputFile @ref="inputFileRef"
              id="@inputId"
              OnChange="HandleFileSelected"
              multiple="@Multiple"
              accept="@Accept"
              style="display: none;" />

    @if (errorMessages.Any())
    {
        <div>
            @foreach (var error in errorMessages)
            {
                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-danger); display: block;">
                    @error
                </RadzenText>
            }
        </div>
    }

    @if (uploadedFiles.Any())
    {
        <div>
            <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-success);">
                @uploadedFiles.Count dosya seçildi
            </RadzenText>
        </div>
    }
</div>

@code {
    [Parameter]
    public bool Multiple { get; set; } = false;

    [Parameter]
    public string Accept { get; set; } = "image/*";

    [Parameter]
    public long MaxFileSize { get; set; } = 5242880; // 5MB default

    [Parameter]
    public string ButtonText { get; set; } = "Dosya Seç";

    [Parameter]
    public EventCallback<List<UploadedFileModel>> OnFilesUploaded { get; set; }

    private InputFile? inputFileRef;
    private string inputId = $"file-input-{Guid.NewGuid()}";
    private List<UploadedFileModel> uploadedFiles = new();
    private List<string> errorMessages = new();

    private async Task OpenFileDialog()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{inputId}').click()");
        }
        catch (Exception ex)
        {
            errorMessages.Add($"Dosya seçme ekranı açılamadı: {ex.Message}");
            StateHasChanged();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        errorMessages.Clear();
        uploadedFiles.Clear();

        var files = e.GetMultipleFiles(Multiple ? 10 : 1);

        foreach (var file in files)
        {
            try
            {
                // Check file size
                if (file.Size > MaxFileSize)
                {
                    errorMessages.Add($"{file.Name}: Dosya boyutu çok büyük (Max: {MaxFileSize / 1024 / 1024}MB)");
                    continue;
                }

                // Read file as Base64
                using var stream = file.OpenReadStream(MaxFileSize);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var bytes = ms.ToArray();
                var base64 = Convert.ToBase64String(bytes);
                var base64Data = $"data:{file.ContentType};base64,{base64}";

                uploadedFiles.Add(new UploadedFileModel
                {
                    FileName = file.Name,
                    ContentType = file.ContentType,
                    FileSize = file.Size,
                    Base64Data = base64Data
                });
            }
            catch (Exception ex)
            {
                errorMessages.Add($"{file.Name}: Hata - {ex.Message}");
            }
        }

        if (uploadedFiles.Any())
        {
            await OnFilesUploaded.InvokeAsync(uploadedFiles);
        }

        StateHasChanged();
    }

    public class UploadedFileModel
    {
        public string FileName { get; set; } = string.Empty;
        public string ContentType { get; set; } = string.Empty;
        public long FileSize { get; set; }
        public string Base64Data { get; set; } = string.Empty;
    }
}
