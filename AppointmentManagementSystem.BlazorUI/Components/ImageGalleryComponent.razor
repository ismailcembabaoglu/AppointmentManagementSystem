@using AppointmentManagementSystem.Application.DTOs
@inject DialogService DialogService

<RadzenCard Style="@CardStyle">
    <RadzenStack Orientation="Orientation.Vertical" Gap="16px">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600; margin: 0;">
                üì∏ @Title
            </RadzenText>
            @if (Photos != null && Photos.Any())
            {
                <RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="@Photos.Count().ToString()" />
            }
        </RadzenStack>

        @if (Photos == null || !Photos.Any())
        {
            <RadzenCard Style="padding: 32px; background: var(--rz-base-100); text-align: center;">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="12px">
                    <RadzenText TextStyle="TextStyle.H3" Style="color: var(--rz-text-disabled-color); margin: 0;">
                        üñºÔ∏è
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">
                        Hen√ºz fotoƒüraf y√ºklenmemi≈ü
                    </RadzenText>
                </RadzenStack>
            </RadzenCard>
        }
        else
        {
            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 12px;">
                @foreach (var photo in Photos)
                {
                    <div class="photo-item" style="@PhotoItemStyle">
                        @if (!string.IsNullOrEmpty(photo.Base64Data))
                        {
                            <img src="data:@photo.ContentType;base64,@photo.Base64Data"
                                 alt="@photo.FileName"
                                 style="@ImageStyle"
                                 @onclick="@(() => ShowFullImage(photo))" />
                        }
                        else
                        {
                            <div style="@PlaceholderStyle">
                                <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-text-disabled-color); margin: 0;">
                                    üñºÔ∏è
                                </RadzenText>
                            </div>
                        }

                        <!-- Overlay with actions -->
                        <div class="photo-overlay" style="@OverlayStyle">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" JustifyContent="JustifyContent.Center">
                                <RadzenButton Icon="zoom_in"
                                            ButtonStyle="ButtonStyle.Light"
                                            Size="ButtonSize.Small"
                                            Click="@(() => ShowFullImage(photo))"
                                            Style="border-radius: 50%; width: 36px; height: 36px;" />

                                @if (AllowDelete)
                                {
                                    <RadzenButton Icon="delete"
                                                ButtonStyle="ButtonStyle.Danger"
                                                Size="ButtonSize.Small"
                                                Click="@(() => DeletePhoto(photo))"
                                                Style="border-radius: 50%; width: 36px; height: 36px;" />
                                }
                            </RadzenStack>

                            <RadzenText TextStyle="TextStyle.Caption"
                                       Style="color: white; text-align: center; margin-top: 8px; font-size: 11px; text-shadow: 0 1px 3px rgba(0,0,0,0.5);">
                                @FormatFileSize(photo.FileSize)
                            </RadzenText>
                        </div>
                    </div>
                }
            </div>
        }
    </RadzenStack>
</RadzenCard>

<style>
    .photo-item {
        position: relative;
        overflow: hidden;
    }

    .photo-item:hover .photo-overlay {
        opacity: 1;
    }

    .photo-overlay {
        opacity: 0;
        transition: opacity 0.3s ease;
    }
</style>

@code {
    [Parameter] public IEnumerable<PhotoDto>? Photos { get; set; }
    [Parameter] public string Title { get; set; } = "Fotoƒüraf Galerisi";
    [Parameter] public bool AllowDelete { get; set; } = true;
    [Parameter] public EventCallback<PhotoDto> OnPhotoDeleted { get; set; }
    [Parameter] public string CardStyle { get; set; } = "width: 100%;";

    private string PhotoItemStyle => @"
        aspect-ratio: 1;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        cursor: pointer;
        position: relative;
        background: var(--rz-base-200);
    ";

    private string ImageStyle => @"
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    ";

    private string PlaceholderStyle => @"
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--rz-base-100);
    ";

    private string OverlayStyle => @"
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to bottom, rgba(0,0,0,0.3), rgba(0,0,0,0.7));
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 12px;
    ";

    private async Task ShowFullImage(PhotoDto photo)
    {
        if (string.IsNullOrEmpty(photo.Base64Data))
            return;

        var imageHtml = $@"
            <div style='text-align: center;'>
                <img src='data:{photo.ContentType};base64,{photo.Base64Data}'
                     alt='{photo.FileName}'
                     style='max-width: 100%; max-height: 70vh; border-radius: 8px; box-shadow: 0 4px 20px rgba(0,0,0,0.3);' />
                <div style='margin-top: 16px; color: var(--rz-text-secondary-color);'>
                    <strong>{photo.FileName}</strong>
                    <br/>
                    <small>{FormatFileSize(photo.FileSize)} ‚Ä¢ {photo.CreatedAt:dd.MM.yyyy HH:mm}</small>
                </div>
            </div>
        ";

        await DialogService.OpenAsync(
            "Fotoƒüraf G√∂r√ºnt√ºle",
            ds => @<div>@((MarkupString)imageHtml)</div>,
            new DialogOptions
            {
                Width = "auto",
                Height = "auto",
                Resizable = true,
                Draggable = true,
                CloseDialogOnOverlayClick = true
            }
        );
    }

    private async Task DeletePhoto(PhotoDto photo)
    {
        var confirmed = await DialogService.Confirm(
            "Bu fotoƒürafƒ± silmek istediƒüinizden emin misiniz?",
            "Fotoƒüraf Sil",
            new ConfirmOptions
            {
                OkButtonText = "Evet, Sil",
                CancelButtonText = "ƒ∞ptal"
            }
        );

        if (confirmed == true)
        {
            await OnPhotoDeleted.InvokeAsync(photo);
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}
