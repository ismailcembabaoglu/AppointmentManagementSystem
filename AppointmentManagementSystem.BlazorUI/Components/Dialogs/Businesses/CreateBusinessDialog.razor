@using AppointmentManagementSystem.Application.DTOs
@using AppointmentManagementSystem.BlazorUI.Models
@using AppointmentManagementSystem.BlazorUI.Services.ApiServices
@using Radzen
@using static AppointmentManagementSystem.BlazorUI.Components.FileUploadComponent
@inject IBusinessApiService BusinessApiService
@inject ICategoryApiService CategoryApiService
@inject IPhotoApiService PhotoApiService
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenCard Style="width: 100%; max-width: 900px; min-width: auto;">
    <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
        <!-- Modern Başlık -->
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="8px" Style="padding-bottom: 8px; border-bottom: 2px solid var(--rz-primary); flex-wrap: wrap;">
            <RadzenText TextStyle="TextStyle.H4" Style="margin: 0; color: var(--rz-primary); font-weight: 600; text-align: center;">
                @(isEdit ? "🏢 İşletme Düzenle" : "🏢 Yeni İşletme Oluştur")
            </RadzenText>
        </RadzenStack>

        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Genel Bilgiler">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="16px" Style="padding-top: 16px;">
                        <!-- İşletme Adı -->
                        <RadzenFormField Text="İşletme Adı" Variant="Variant.Outlined" Style="width: 100%;">
                            <RadzenTextBox @bind-Value="businessDto.Name" Placeholder="İşletme adını girin" Style="width: 100%;" />
                            @if (!string.IsNullOrEmpty(nameError))
                            {
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-danger); margin-top: 4px; display: block;">
                                    ⚠️ @nameError
                                </RadzenText>
                            }
                        </RadzenFormField>

                        <!-- Kategori -->
                        <RadzenFormField Text="Kategori" Variant="Variant.Outlined" Style="width: 100%;">
                            @if (categoriesLoading)
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                                    <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
                                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">Yükleniyor...</RadzenText>
                                </RadzenStack>
                            }
                            else
                            {
                                <RadzenDropDown @bind-Value="businessDto.CategoryId"
                                              Data="categories"
                                              TextProperty="Name"
                                              ValueProperty="Id"
                                              Placeholder="Kategori seçin"
                                              Style="width: 100%;" />
                            }
                            @if (!string.IsNullOrEmpty(categoryError))
                            {
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-danger); margin-top: 4px; display: block;">
                                    ⚠️ @categoryError
                                </RadzenText>
                            }
                        </RadzenFormField>

                        <!-- Açıklama -->
                        <RadzenFormField Text="Açıklama" Variant="Variant.Outlined" Style="width: 100%;">
                            <RadzenTextArea @bind-Value="businessDto.Description" Rows="3"
                                          Placeholder="İşletme hakkında detaylı açıklama yazın..."
                                          Style="width: 100%;" />
                        </RadzenFormField>

                        <!-- Adres -->
                        <RadzenFormField Text="Adres" Variant="Variant.Outlined" Style="width: 100%;">
                            <RadzenTextBox @bind-Value="businessDto.Address" Placeholder="Tam adres" Style="width: 100%;" />
                        </RadzenFormField>

                        <!-- Şehir ve İlçe -->
                        <RadzenRow Gap="12px">
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenFormField Text="Şehir" Variant="Variant.Outlined" Style="width: 100%;">
                                    <RadzenTextBox @bind-Value="businessDto.City" Placeholder="Şehir" Style="width: 100%;" />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenFormField Text="İlçe" Variant="Variant.Outlined" Style="width: 100%;">
                                    <RadzenTextBox @bind-Value="businessDto.District" Placeholder="İlçe" Style="width: 100%;" />
                                </RadzenFormField>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenTabsItem>

                <RadzenTabsItem Text="İletişim Bilgileri">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="16px" Style="padding-top: 16px;">
                        <!-- Telefon -->
                        <RadzenFormField Text="Telefon" Variant="Variant.Outlined" Style="width: 100%;">
                            <ChildContent>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                                    <RadzenText TextStyle="TextStyle.Body1">📞</RadzenText>
                                    <RadzenTextBox @bind-Value="businessDto.Phone" Placeholder="(5XX) XXX XX XX" Style="flex: 1;" />
                                </RadzenStack>
                            </ChildContent>
                        </RadzenFormField>

                        <!-- E-posta -->
                        <RadzenFormField Text="E-posta" Variant="Variant.Outlined" Style="width: 100%;">
                            <ChildContent>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                                    <RadzenText TextStyle="TextStyle.Body1">📧</RadzenText>
                                    <RadzenTextBox @bind-Value="businessDto.Email" Placeholder="ornek@firma.com" Style="flex: 1;" />
                                </RadzenStack>
                            </ChildContent>
                        </RadzenFormField>

                        <!-- Web Sitesi -->
                        <RadzenFormField Text="Web Sitesi" Variant="Variant.Outlined" Style="width: 100%;">
                            <ChildContent>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                                    <RadzenText TextStyle="TextStyle.Body1">🌐</RadzenText>
                                    <RadzenTextBox @bind-Value="businessDto.Website" Placeholder="https://www.ornek.com" Style="flex: 1;" />
                                </RadzenStack>
                            </ChildContent>
                        </RadzenFormField>
                    </RadzenStack>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Fotoğraflar">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="16px" Style="padding-top: 16px;">
                        <FileUploadComponent @ref="fileUploadComponent"
                                           Multiple="true"
                                           Accept="image/jpeg,image/jpg,image/png,image/webp"
                                           MaxFileSize="@(10 * 1024 * 1024)"
                                           OnFilesUploaded="HandleFilesUploaded" />

                        @if (pendingPhotos.Any())
                        {
                            <RadzenCard Style="background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%); padding: 12px;">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                                    <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600;">
                                        📸 @pendingPhotos.Count yeni fotoğraf yüklenmeye hazır
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenCard>
                        }
                    </RadzenStack>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>

        <!-- Butonlar -->
        <RadzenRow Gap="12px" Style="padding-top: 8px; border-top: 1px solid var(--rz-border-color);">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenButton Text="İptal"
                            ButtonStyle="ButtonStyle.Light"
                            Click="Cancel"
                            Size="ButtonSize.Medium"
                            Style="width: 100%;" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenButton Text="@(isSaving ? (isEdit ? "Güncelleniyor..." : "Oluşturuluyor...") : (isEdit ? "Güncelle" : "Oluştur"))"
                            ButtonStyle="ButtonStyle.Primary"
                            Click="Save"
                            Disabled="isSaving"
                            Size="ButtonSize.Medium"
                            Style="width: 100%; font-weight: 600;" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public bool isEdit { get; set; } = false;

    [Parameter]
    public int BusinessId { get; set; } = 0;

    private CreateBusinessDto businessDto = new();
    private List<CategoryDto> categories = new();
    private bool categoriesLoading = true;
    private bool isSaving = false;

    // File upload
    private FileUploadComponent? fileUploadComponent;
    private List<UploadedFileModel> pendingPhotos = new();

    // Validation errors
    private string nameError = "";
    private string categoryError = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        
        if (isEdit && BusinessId > 0)
        {
            await LoadBusinessForEdit();
        }
    }

    private async Task LoadCategories()
    {
        categoriesLoading = true;
        var response = await CategoryApiService.GetAllCategoriesAsync();
        if (response.Success)
        {
            categories = response.Data ?? new List<CategoryDto>();
        }
        categoriesLoading = false;
    }

    private async Task LoadBusinessForEdit()
    {
        var response = await BusinessApiService.GetBusinessByIdAsync(BusinessId);
        if (response.Success && response.Data != null)
        {
            var business = response.Data;
            businessDto = new CreateBusinessDto
            {
                Name = business.Name,
                CategoryId = business.CategoryId,
                Description = business.Description,
                Address = business.Address,
                City = business.City,
                District = business.District,
                Phone = business.Phone,
                Email = business.Email,
                Website = business.Website
            };
        }
    }

    private void HandleFilesUploaded(List<UploadedFileModel> files)
    {
        pendingPhotos = files;
        StateHasChanged();
    }

    private async Task Save()
    {
        if (!Validate())
            return;

        isSaving = true;
        StateHasChanged();

        try
        {
            ApiResponse<BusinessDto> response;

            if (isEdit)
            {
                response = await BusinessApiService.UpdateBusinessAsync(BusinessId, businessDto);
            }
            else
            {
                response = await BusinessApiService.CreateBusinessAsync(businessDto);
            }

            if (response.Success && response.Data != null)
            {
                var createdBusinessId = response.Data.Id;

                // Upload photos if any
                if (pendingPhotos.Any())
                {
                    await UploadPhotos(createdBusinessId);
                }

                NotificationService.Notify(NotificationSeverity.Success, "Başarılı",
                    isEdit ? "İşletme başarıyla güncellendi." : "İşletme başarıyla oluşturuldu.");
                DialogService.Close(true);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hata", response.Message);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", $"Bir hata oluştu: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task UploadPhotos(int businessId)
    {
        var uploadedCount = 0;
        foreach (var photo in pendingPhotos)
        {
            try
            {
                var uploadDto = new UploadPhotoDto
                {
                    FileName = photo.FileName,
                    Base64Data = photo.Base64Data,
                    ContentType = photo.ContentType
                };

                var uploadResponse = await PhotoApiService.UploadBusinessPhotoAsync(businessId, uploadDto);
                if (uploadResponse.Success)
                {
                    uploadedCount++;
                }
            }
            catch (Exception ex)
            {
                // Log error but continue with other photos
                Console.WriteLine($"Fotoğraf yükleme hatası: {ex.Message}");
            }
        }

        if (uploadedCount > 0)
        {
            NotificationService.Notify(NotificationSeverity.Info, "Fotoğraflar",
                $"{uploadedCount} fotoğraf başarıyla yüklendi.");
        }
    }

    private bool Validate()
    {
        nameError = "";
        categoryError = "";

        bool isValid = true;

        if (string.IsNullOrWhiteSpace(businessDto.Name))
        {
            nameError = "İşletme adı gereklidir.";
            isValid = false;
        }

        if (businessDto.CategoryId <= 0)
        {
            categoryError = "Kategori seçimi gereklidir.";
            isValid = false;
        }

        return isValid;
    }

    private void Cancel()
    {
        DialogService.Close(false);
    }
}
