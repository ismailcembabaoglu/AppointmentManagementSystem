@using Radzen
@using AppointmentManagementSystem.BlazorUI.Components
@using static AppointmentManagementSystem.BlazorUI.Components.FileUploadComponent

<RadzenCard Style="width: 700px; max-width: 100%;">
    <RadzenStack Orientation="Orientation.Vertical" Gap="16px">
        <h3>@(IsEdit ? "Çalışan Düzenle" : "Yeni Çalışan Ekle")</h3>

        <RadzenStack Orientation="Orientation.Vertical" Gap="12px">
            <div>
                <RadzenLabel Text="Ad Soyad *" />
                <RadzenTextBox @bind-Value="model.Name"
                              Placeholder="Örn: Ahmet Yılmaz"
                              Style="width: 100%;" />
                @if (!string.IsNullOrEmpty(nameError))
                {
                    <RadzenText TextStyle="TextStyle.Caption"
                               Style="color: var(--rz-danger);">
                        @nameError
                    </RadzenText>
                }
            </div>

            <div>
                <RadzenLabel Text="Uzmanlık" />
                <RadzenTextBox @bind-Value="model.Specialization"
                              Placeholder="Örn: Kuaför, Masöz, Berber"
                              Style="width: 100%;" />
            </div>

            <div>
                <RadzenLabel Text="Açıklama" />
                <RadzenTextArea @bind-Value="model.Description"
                               Rows="3"
                               Placeholder="Çalışan hakkında detaylı bilgi"
                               Style="width: 100%;" />
            </div>

            <div>
                <RadzenLabel Text="Fotoğraflar" />
                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin-bottom: 8px;">
                    Çalışan için birden fazla fotoğraf ekleyebilirsiniz
                </RadzenText>

                <FileUploadComponent Multiple="true"
                                   Accept="image/*"
                                   MaxFileSize="5242880"
                                   OnFilesUploaded="HandlePhotosUploaded" />

                @if (model.Photos.Any())
                {
                    <div style="margin-top: 12px;">
                        <RadzenText TextStyle="TextStyle.Caption">
                            @model.Photos.Count fotoğraf eklendi
                        </RadzenText>
                        <div style="display: flex; flex-wrap: wrap; gap: 8px; margin-top: 8px;">
                            @foreach (var (photo, index) in model.Photos.Select((p, i) => (p, i)))
                            {
                                <div style="position: relative; width: 80px; height: 80px;">
                                    <img src="@photo"
                                         alt="Çalışan fotoğrafı"
                                         style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px; border: 2px solid #e0e0e0;" />
                                    <RadzenButton Icon="close"
                                                 ButtonStyle="ButtonStyle.Danger"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => RemovePhoto(index))"
                                                 Style="position: absolute; top: -8px; right: -8px; border-radius: 50%; width: 24px; height: 24px; padding: 0;" />
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </RadzenStack>

        <div class="d-flex justify-content-end gap-2" style="margin-top: 16px;">
            <RadzenButton Text="İptal"
                         ButtonStyle="ButtonStyle.Light"
                         Click="Cancel" />
            <RadzenButton Text="@(IsEdit ? "Güncelle" : "Ekle")"
                         ButtonStyle="ButtonStyle.Primary"
                         Click="Save" />
        </div>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public bool IsEdit { get; set; } = false;

    [Parameter]
    public object? EmployeeToEdit { get; set; }

    [Inject]
    public DialogService DialogService { get; set; } = default!;

    [Inject]
    public NotificationService NotificationService { get; set; } = default!;

    private EmployeeModel model = new();
    private string nameError = "";

    protected override void OnInitialized()
    {
        if (IsEdit && EmployeeToEdit != null)
        {
            dynamic source = EmployeeToEdit;
            model = new EmployeeModel
            {
                Name = source.Name,
                Specialization = source.Specialization,
                Description = source.Description,
                Photos = new List<string>(source.Photos)
            };
        }
    }

    private void HandlePhotosUploaded(List<UploadedFileModel> uploadedFiles)
    {
        var base64Photos = uploadedFiles.Select(f => f.Base64Data).ToList();
        model.Photos.AddRange(base64Photos);
        NotificationService.Notify(NotificationSeverity.Success, "Başarılı",
            $"{uploadedFiles.Count} fotoğraf eklendi.");
        StateHasChanged();
    }

    private void RemovePhoto(int index)
    {
        if (index >= 0 && index < model.Photos.Count)
        {
            model.Photos.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void Save()
    {
        if (!Validate())
            return;

        DialogService.Close(model);
    }

    private bool Validate()
    {
        nameError = "";
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(model.Name))
        {
            nameError = "Çalışan adı gereklidir.";
            isValid = false;
        }

        return isValid;
    }

    private void Cancel()
    {
        DialogService.Close(null);
    }

    public class EmployeeModel
    {
        public string Name { get; set; } = "";
        public string? Specialization { get; set; }
        public string? Description { get; set; }
        public List<string> Photos { get; set; } = new();
    }
}
