@using AppointmentManagementSystem.Application.DTOs
@using AppointmentManagementSystem.BlazorUI.Models
@using AppointmentManagementSystem.BlazorUI.Services.ApiServices
@using Radzen
@using static AppointmentManagementSystem.BlazorUI.Components.FileUploadComponent
@inject IAppointmentApiService AppointmentApiService
@inject IBusinessApiService BusinessApiService
@inject IServiceApiService ServiceApiService
@inject IEmployeeApiService EmployeeApiService
@inject IPhotoApiService PhotoApiService
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenStack Orientation="Orientation.Vertical" Gap="0" Style="width: 100%; max-width: 900px; min-width: auto;">
    <!-- Header with Progress -->
    <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); margin-bottom: 0; border-radius: 12px 12px 0 0;">
        <RadzenStack Orientation="Orientation.Vertical" Gap="16px">
            <RadzenText TextStyle="TextStyle.H4" Style="color: white; font-weight: 700; margin: 0; text-align: center;">
                üìÖ Randevu Olu≈ütur
            </RadzenText>
            
            <!-- Steps Progress -->
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="position: relative;">
                @for (int i = 0; i < stepTitles.Length; i++)
                {
                    var stepIndex = i;
                    var isCompleted = stepIndex < currentStep;
                    var isCurrent = stepIndex == currentStep;
                    
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="8px" Style="flex: 1; z-index: 2;">
                        <div style="width: 40px; height: 40px; border-radius: 50%; background: @(isCompleted ? "white" : isCurrent ? "rgba(255,255,255,0.9)" : "rgba(255,255,255,0.3)"); display: flex; align-items: center; justify-content: center; font-weight: 600; color: @(isCompleted || isCurrent ? "var(--rz-primary)" : "white"); transition: all 0.3s ease;">
                            @if (isCompleted)
                            {
                                <RadzenIcon Icon="check" Style="font-size: 20px;" />
                            }
                            else
                            {
                                @(stepIndex + 1)
                            }
                        </div>
                        <RadzenText TextStyle="TextStyle.Caption" Style="color: white; margin: 0; text-align: center; font-size: 10px; display: block;">
                            @stepTitles[stepIndex]
                        </RadzenText>
                    </RadzenStack>
                }
                
                <!-- Progress Line -->
                <div style="position: absolute; top: 20px; left: 5%; right: 5%; height: 2px; background: rgba(255,255,255,0.3); z-index: 1;">
                    <div style="height: 100%; background: white; width: @((currentStep * 100.0 / (stepTitles.Length - 1)).ToString("F0"))%; transition: width 0.3s ease;"></div>
                </div>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <!-- Step Content -->
    <RadzenCard Style="flex: 1; margin-top: 0; border-radius: 0 0 12px 12px; min-height: 400px;">
        @if (currentStep == 0)
        {
            <!-- Step 1: Date Selection -->
            <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
                <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 600; margin: 0;">
                    Randevu Tarihini Se√ßin
                </RadzenText>
                
                <RadzenDatePicker @bind-Value="selectedDate"
                                 Inline="true"
                                 DateFormat="dd/MM/yyyy"
                                 Style="width: 100%;"
                                 Min="DateTime.Today"
                                 Change="@(args => OnDateChanged(args))" />
                
                @if (selectedDate.HasValue)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
                        Se√ßilen Tarih: <strong>@selectedDate.Value.ToString("dd MMMM yyyy, dddd")</strong>
                    </RadzenAlert>
                }
            </RadzenStack>
        }
        else if (currentStep == 1)
        {
            <!-- Step 2: Time Slot Selection -->
            <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
                <RadzenStack Orientation="Orientation.Vertical" Gap="8px">
                    <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 600; margin: 0;">
                        Saat Se√ßin
                    </RadzenText>
                    @if (selectedDate.HasValue)
                    {
                        <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color); margin: 0;">
                            @selectedDate.Value.ToString("dd MMMM yyyy, dddd") - Uygun saatler
                        </RadzenText>
                    }
                </RadzenStack>

                @if (loadingTimeSlots)
                {
                    <RadzenStack Orientation="Orientation.Vertical" Gap="16px" AlignItems="AlignItems.Center" Style="padding: 40px 0;">
                        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                        <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">
                            Uygun saatler y√ºkleniyor...
                        </RadzenText>
                    </RadzenStack>
                }
                else if (availableTimeSlots.Any())
                {
                    <RadzenRow Gap="12px">
                        @foreach (var slot in availableTimeSlots)
                        {
                            var isSelected = selectedTimeSlot == slot;
                            <RadzenColumn Size="6" SizeSM="4" SizeMD="3">
                                <RadzenButton Text="@($"{slot.Hours:00}:{slot.Minutes:00}")"
                                             ButtonStyle="@(isSelected ? ButtonStyle.Primary : ButtonStyle.Light)"
                                             Click="@(() => SelectTimeSlot(slot))"
                                             Style="width: 100%; font-weight: 600; transition: all 0.2s ease;"
                                             Variant="@(isSelected ? Variant.Filled : Variant.Outlined)" />
                            </RadzenColumn>
                        }
                    </RadzenRow>
                }
                else
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Variant="Variant.Flat">
                        Bu tarih i√ßin uygun saat bulunmamaktadƒ±r. L√ºtfen ba≈üka bir tarih se√ßin.
                    </RadzenAlert>
                }
            </RadzenStack>
        }
        else if (currentStep == 2)
        {
            <!-- Step 3: Service Selection (Multiple) -->
            <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
                <RadzenStack Orientation="Orientation.Vertical" Gap="8px">
                    <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 600; margin: 0;">
                        Hizmet Se√ßin
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color); margin: 0;">
                        Birden fazla hizmet se√ßebilirsiniz
                    </RadzenText>
                </RadzenStack>
                
                @if (servicesLoading)
                {
                    <RadzenStack Orientation="Orientation.Vertical" Gap="16px" AlignItems="AlignItems.Center" Style="padding: 40px 0;">
                        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                        <RadzenText TextStyle="TextStyle.Body2">Hizmetler y√ºkleniyor...</RadzenText>
                    </RadzenStack>
                }
                else if (services.Any())
                {
                    <RadzenStack Orientation="Orientation.Vertical" Gap="12px">
                        @foreach (var service in services)
                        {
                            var isSelected = selectedServices.Contains(service.Id);
                            <RadzenCard @onclick="@(() => ToggleService(service.Id))"
                                       Style="@GetServiceCardStyle(isSelected)">
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start" Gap="16px">
                                    <RadzenStack Orientation="Orientation.Vertical" Gap="8px" Style="flex: 1;">
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" AlignItems="AlignItems.Center">
                                            @if (isSelected)
                                            {
                                                <RadzenIcon Icon="check_circle" Style="color: var(--rz-primary); font-size: 24px;" />
                                            }
                                            <RadzenText TextStyle="TextStyle.Subtitle1" Style="margin: 0; font-weight: 600;">
                                                @service.Name
                                            </RadzenText>
                                        </RadzenStack>
                                        
                                        @if (!string.IsNullOrEmpty(service.Description))
                                        {
                                            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color); margin: 0;">
                                                @service.Description
                                            </RadzenText>
                                        }
                                        
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="16px" AlignItems="AlignItems.Center">
                                            @if (service.Price.HasValue)
                                            {
                                                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" AlignItems="AlignItems.Center">
                                                    <RadzenIcon Icon="payments" Style="font-size: 16px; color: var(--rz-success);" />
                                                    <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600; color: var(--rz-success); margin: 0;">
                                                        @service.Price.Value.ToString("C")
                                                    </RadzenText>
                                                </RadzenStack>
                                            }
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" AlignItems="AlignItems.Center">
                                                <RadzenIcon Icon="schedule" Style="font-size: 16px; color: var(--rz-text-secondary-color);" />
                                                <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color); margin: 0;">
                                                    @service.DurationMinutes dk
                                                </RadzenText>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        }
                    </RadzenStack>
                    
                    @if (selectedServices.Any())
                    {
                        <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); margin-top: 8px;">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                                <RadzenText TextStyle="TextStyle.Body1" Style="color: white; margin: 0; font-weight: 600;">
                                    Toplam S√ºre:
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.H6" Style="color: white; margin: 0; font-weight: 700;">
                                    @GetTotalDuration() dk
                                </RadzenText>
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Style="margin-top: 8px;">
                                <RadzenText TextStyle="TextStyle.Body1" Style="color: white; margin: 0; font-weight: 600;">
                                    Toplam √úcret:
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.H6" Style="color: white; margin: 0; font-weight: 700;">
                                    @GetTotalPrice()
                                </RadzenText>
                            </RadzenStack>
                        </RadzenCard>
                    }
                }
                else
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Variant="Variant.Flat">
                        Bu i≈ületmede hen√ºz hizmet bulunmamaktadƒ±r.
                    </RadzenAlert>
                }
            </RadzenStack>
        }
        else if (currentStep == 3)
        {
            <!-- Step 4: Employee Selection -->
            <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
                <RadzenStack Orientation="Orientation.Vertical" Gap="8px">
                    <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 600; margin: 0;">
                        √áalƒ±≈üan Se√ßin (Opsiyonel)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color); margin: 0;">
                        Tercih ettiƒüiniz √ßalƒ±≈üanƒ± se√ßebilir veya atla'ya basabilirsiniz
                    </RadzenText>
                </RadzenStack>
                
                @if (employeesLoading)
                {
                    <RadzenStack Orientation="Orientation.Vertical" Gap="16px" AlignItems="AlignItems.Center" Style="padding: 40px 0;">
                        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                        <RadzenText TextStyle="TextStyle.Body2">√áalƒ±≈üanlar y√ºkleniyor...</RadzenText>
                    </RadzenStack>
                }
                else if (employees.Any())
                {
                    <RadzenRow Gap="12px">
                        @foreach (var employee in employees)
                        {
                            var isSelected = selectedEmployeeId == employee.Id;
                            <RadzenColumn Size="12" SizeSM="6" SizeMD="4">
                                <RadzenCard @onclick="@(() => SelectEmployee(employee.Id))"
                                           Style="@GetEmployeeCardStyle(isSelected)">
                                    <RadzenStack Orientation="Orientation.Vertical" Gap="12px" AlignItems="AlignItems.Center">
                                        <div style="width: 80px; height: 80px; border-radius: 50%; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center; position: relative;">
                                            <RadzenText TextStyle="TextStyle.DisplayH5" Style="color: white; margin: 0; font-weight: 700;">
                                                @employee.Name.Substring(0, 1).ToUpper()
                                            </RadzenText>
                                            @if (isSelected)
                                            {
                                                <div style="position: absolute; top: -5px; right: -5px; width: 30px; height: 30px; border-radius: 50%; background: var(--rz-primary); display: flex; align-items: center; justify-content: center; border: 3px solid white;">
                                                    <RadzenIcon Icon="check" Style="color: white; font-size: 16px;" />
                                                </div>
                                            }
                                        </div>
                                        
                                        <RadzenStack Orientation="Orientation.Vertical" Gap="4px" AlignItems="AlignItems.Center" Style="text-align: center;">
                                            <RadzenText TextStyle="TextStyle.Subtitle1" Style="margin: 0; font-weight: 600;">
                                                @employee.Name
                                            </RadzenText>
                                            
                                            @if (!string.IsNullOrEmpty(employee.Specialization))
                                            {
                                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">
                                                    @employee.Specialization
                                                </RadzenText>
                                            }
                                            
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" AlignItems="AlignItems.Center">
                                                <RadzenIcon Icon="star" Style="font-size: 14px; color: #fbbf24;" />
                                                <RadzenText TextStyle="TextStyle.Caption" Style="font-weight: 600; margin: 0;">4.8</RadzenText>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenColumn>
                        }
                    </RadzenRow>
                }
                else
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat">
                        √áalƒ±≈üan se√ßmeden devam edebilirsiniz. ƒ∞≈ületme sizin i√ßin uygun √ßalƒ±≈üanƒ± atayacaktƒ±r.
                    </RadzenAlert>
                }
            </RadzenStack>
        }
        else if (currentStep == 4)
        {
            <!-- Step 5: Photo Upload -->
            <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
                <RadzenStack Orientation="Orientation.Vertical" Gap="8px">
                    <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 600; margin: 0;">
                        Fotoƒüraf Ekleyin (Opsiyonel)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color); margin: 0;">
                        Randevunuzla ilgili fotoƒüraflar y√ºkleyebilirsiniz (PNG veya JPEG)
                    </RadzenText>
                </RadzenStack>
                
                <FileUploadComponent @ref="fileUploadComponent"
                                   Multiple="true"
                                   Accept="image/png,image/jpeg,image/jpg"
                                   MaxFileSize="@(10 * 1024 * 1024)"
                                   OnFilesUploaded="HandleFilesUploaded" />
                
                @if (uploadedPhotos.Any())
                {
                    <RadzenCard Style="background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%);">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                            <RadzenIcon Icon="photo_library" Style="color: var(--rz-primary);" />
                            <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600; margin: 0;">
                                @uploadedPhotos.Count fotoƒüraf y√ºklendi
                            </RadzenText>
                        </RadzenStack>
                    </RadzenCard>
                }
            </RadzenStack>
        }
        else if (currentStep == 5)
        {
            <!-- Step 6: Summary -->
            <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
                <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 600; margin: 0; text-align: center;">
                    Randevu √ñzeti
                </RadzenText>
                
                <!-- Summary Cards -->
                <RadzenStack Orientation="Orientation.Vertical" Gap="12px">
                    <!-- Date & Time -->
                    <RadzenCard Style="background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%);">
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" AlignItems="AlignItems.Center">
                            <div style="width: 50px; height: 50px; border-radius: 50%; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center;">
                                <RadzenIcon Icon="event" Style="color: white; font-size: 24px;" />
                            </div>
                            <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">Tarih ve Saat</RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle1" Style="margin: 0; font-weight: 600;">
                                    @selectedDate.Value.ToString("dd MMMM yyyy, dddd")
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2" Style="margin: 0; font-weight: 600; color: var(--rz-primary);">
                                    @($"{selectedTimeSlot.Value.Hours:00}:{selectedTimeSlot.Value.Minutes:00}")
                                </RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                    
                    <!-- Services -->
                    <RadzenCard Style="background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%);">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="12px">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" AlignItems="AlignItems.Center">
                                <div style="width: 50px; height: 50px; border-radius: 50%; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center;">
                                    <RadzenIcon Icon="design_services" Style="color: white; font-size: 24px;" />
                                </div>
                                <RadzenStack Orientation="Orientation.Vertical" Gap="4px" Style="flex: 1;">
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">Se√ßilen Hizmetler</RadzenText>
                                    @foreach (var serviceId in selectedServices)
                                    {
                                        var service = services.FirstOrDefault(s => s.Id == serviceId);
                                        if (service != null)
                                        {
                                            <RadzenText TextStyle="TextStyle.Body2" Style="margin: 0; font-weight: 600;">
                                                ‚Ä¢ @service.Name (@service.DurationMinutes dk - @service.Price?.ToString("C"))
                                            </RadzenText>
                                        }
                                    }
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                    
                    <!-- Employee -->
                    @if (selectedEmployeeId.HasValue)
                    {
                        var employee = employees.FirstOrDefault(e => e.Id == selectedEmployeeId.Value);
                        if (employee != null)
                        {
                            <RadzenCard Style="background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%);">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" AlignItems="AlignItems.Center">
                                    <div style="width: 50px; height: 50px; border-radius: 50%; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center;">
                                        <RadzenText TextStyle="TextStyle.H6" Style="color: white; margin: 0; font-weight: 700;">
                                            @employee.Name.Substring(0, 1).ToUpper()
                                        </RadzenText>
                                    </div>
                                    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                                        <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">√áalƒ±≈üan</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Style="margin: 0; font-weight: 600;">@employee.Name</RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        }
                    }
                    
                    <!-- Photos -->
                    @if (uploadedPhotos.Any())
                    {
                        <RadzenCard Style="background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%);">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" AlignItems="AlignItems.Center">
                                <div style="width: 50px; height: 50px; border-radius: 50%; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center;">
                                    <RadzenIcon Icon="photo_library" Style="color: white; font-size: 24px;" />
                                </div>
                                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin: 0;">Fotoƒüraflar</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Style="margin: 0; font-weight: 600;">@uploadedPhotos.Count fotoƒüraf</RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    }
                    
                    <!-- Total -->
                    <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                                <RadzenText TextStyle="TextStyle.Body1" Style="color: white; margin: 0;">Toplam S√ºre</RadzenText>
                                <RadzenText TextStyle="TextStyle.H6" Style="color: white; margin: 0; font-weight: 700;">@GetTotalDuration() dakika</RadzenText>
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Vertical" Gap="4px" AlignItems="AlignItems.End">
                                <RadzenText TextStyle="TextStyle.Body1" Style="color: white; margin: 0;">Toplam √úcret</RadzenText>
                                <RadzenText TextStyle="TextStyle.H6" Style="color: white; margin: 0; font-weight: 700;">@GetTotalPrice()</RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenStack>
            </RadzenStack>
        }
    </RadzenCard>

    <!-- Navigation Buttons -->
    <RadzenCard Style="margin-top: 0; border-radius: 12px; background: var(--rz-base-background-color);">
        <RadzenRow Gap="12px">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenButton Text="@(currentStep == 0 ? "ƒ∞ptal" : "Geri")"
                             ButtonStyle="ButtonStyle.Light"
                             Click="@(async () => { if (currentStep == 0) Cancel(); else PreviousStep(); })"
                             Style="width: 100%;"
                             Size="ButtonSize.Large" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenButton Text="@(currentStep == stepTitles.Length - 1 ? (isSaving ? "Olu≈üturuluyor..." : "Randevuyu Olu≈ütur") : "Devam Et")"
                             ButtonStyle="ButtonStyle.Primary"
                             Click="@(async () => { if (currentStep == stepTitles.Length - 1) await Save(); else await NextStep(); })"
                             Disabled="@(!CanProceed() || isSaving)"
                             Style="width: 100%; font-weight: 600;" 
                             Size="ButtonSize.Large" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
</RadzenStack>

@code {
    [Parameter]
    public int CustomerId { get; set; }

    [Parameter]
    public int? PreselectedBusinessId { get; set; }

    private int currentStep = 0;
    private string[] stepTitles = { "Tarih", "Saat", "Hizmet", "√áalƒ±≈üan", "Fotoƒüraf", "√ñzet" };

    // Step 1: Date
    private DateTime? selectedDate = DateTime.Today.AddDays(1);

    // Step 2: Time Slots
    private List<TimeSpan> availableTimeSlots = new();
    private TimeSpan? selectedTimeSlot;
    private bool loadingTimeSlots = false;

    // Step 3: Services
    private List<ServiceDto> services = new();
    private List<int> selectedServices = new();
    private bool servicesLoading = false;

    // Step 4: Employees
    private List<EmployeeDto> employees = new();
    private int? selectedEmployeeId;
    private bool employeesLoading = false;

    // Step 5: Photos
    private FileUploadComponent? fileUploadComponent;
    private List<UploadedFileModel> uploadedPhotos = new();

    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        if (PreselectedBusinessId.HasValue)
        {
            await LoadBusinessData(PreselectedBusinessId.Value);
        }
    }

    private async Task LoadBusinessData(int businessId)
    {
        servicesLoading = true;
        employeesLoading = true;

        var servicesTask = ServiceApiService.GetAllServicesAsync(businessId);
        var employeesTask = EmployeeApiService.GetAllEmployeesAsync(businessId);

        await Task.WhenAll(servicesTask, employeesTask);

        var servicesResponse = await servicesTask;
        if (servicesResponse.Success)
        {
            services = servicesResponse.Data ?? new List<ServiceDto>();
        }

        var employeesResponse = await employeesTask;
        if (employeesResponse.Success)
        {
            employees = employeesResponse.Data ?? new List<EmployeeDto>();
        }

        servicesLoading = false;
        employeesLoading = false;
        StateHasChanged();
    }

    private async Task OnDateChanged(DateTime? value)
    {
        try
        {
            if (value.HasValue)
            {
                await LoadAvailableTimeSlots(value.Value);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", $"Tarih deƒüi≈ütirilirken hata olu≈ütu: {ex.Message}");
        }
    }

    private async Task LoadAvailableTimeSlots(DateTime date)
    {
        try
        {
            loadingTimeSlots = true;
            availableTimeSlots.Clear();
            selectedTimeSlot = null;
            StateHasChanged();

            // Simulate API call - In real app, get from backend
            await Task.Delay(500);

            // Generate time slots (9:00 - 18:00, every 30 minutes)
            var startHour = 9;
            var endHour = 18;

            for (int hour = startHour; hour < endHour; hour++)
            {
                availableTimeSlots.Add(new TimeSpan(hour, 0, 0));
                availableTimeSlots.Add(new TimeSpan(hour, 30, 0));
            }

            loadingTimeSlots = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loadingTimeSlots = false;
            NotificationService.Notify(NotificationSeverity.Error, "Hata", $"Uygun saatler y√ºklenirken hata olu≈ütu: {ex.Message}");
            StateHasChanged();
        }
    }

    private void SelectTimeSlot(TimeSpan slot)
    {
        selectedTimeSlot = slot;
        StateHasChanged();
    }

    private void ToggleService(int serviceId)
    {
        if (selectedServices.Contains(serviceId))
        {
            selectedServices.Remove(serviceId);
        }
        else
        {
            selectedServices.Add(serviceId);
        }
        StateHasChanged();
    }

    private void SelectEmployee(int employeeId)
    {
        selectedEmployeeId = selectedEmployeeId == employeeId ? null : employeeId;
        StateHasChanged();
    }

    private void HandleFilesUploaded(List<UploadedFileModel> files)
    {
        uploadedPhotos = files;
        StateHasChanged();
    }

    private int GetTotalDuration()
    {
        return selectedServices.Sum(id => services.FirstOrDefault(s => s.Id == id)?.DurationMinutes ?? 0);
    }

    private string GetTotalPrice()
    {
        var total = selectedServices.Sum(id => services.FirstOrDefault(s => s.Id == id)?.Price ?? 0);
        return total.ToString("C");
    }

    private bool CanProceed()
    {
        return currentStep switch
        {
            0 => selectedDate.HasValue,
            1 => selectedTimeSlot.HasValue,
            2 => selectedServices.Any(),
            3 => true, // Employee is optional
            4 => true, // Photos are optional
            5 => true,
            _ => false
        };
    }

    private async Task NextStep()
    {
        try
        {
            if (currentStep == 0 && selectedDate.HasValue)
            {
                await LoadAvailableTimeSlots(selectedDate.Value);
            }

            currentStep++;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", $"ƒ∞≈ülem sƒ±rasƒ±nda hata olu≈ütu: {ex.Message}");
        }
    }

    private void PreviousStep()
    {
        currentStep--;
        StateHasChanged();
    }

    private async Task Save()
    {
        // Validation checks
        if (!PreselectedBusinessId.HasValue)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", "ƒ∞≈ületme se√ßilmemi≈ü.");
            return;
        }

        if (!selectedDate.HasValue)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", "Tarih se√ßilmemi≈ü.");
            return;
        }

        if (!selectedTimeSlot.HasValue)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", "Saat se√ßilmemi≈ü.");
            return;
        }

        if (!selectedServices.Any())
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", "En az bir hizmet se√ßmelisiniz.");
            return;
        }

        if (CustomerId <= 0)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", "M√º≈üteri bilgisi bulunamadƒ±. L√ºtfen giri≈ü yapƒ±n.");
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            // Combine date and time
            var appointmentDateTime = selectedDate.Value.Date.Add(selectedTimeSlot.Value);

            // Create appointment with first service (in real app, handle multiple services)
            var appointmentDto = new CreateAppointmentDto
            {
                CustomerId = CustomerId,
                BusinessId = PreselectedBusinessId.Value,
                ServiceId = selectedServices.First(),
                EmployeeId = selectedEmployeeId,
                AppointmentDate = appointmentDateTime,
                StartTime = selectedTimeSlot.Value,
                PhotosBase64 = uploadedPhotos.Select(p => p.Base64Data).ToList(),
                Notes = $"Toplam {selectedServices.Count} hizmet se√ßildi." +
                       (uploadedPhotos.Any() ? $" {uploadedPhotos.Count} fotoƒüraf y√ºklendi." : "")
            };

            var response = await AppointmentApiService.CreateAppointmentAsync(appointmentDto);

            if (response.Success)
            {
                // Upload photos if any
                if (uploadedPhotos.Any() && response.Data != null)
                {
                    // In real app, upload photos to appointment
                    // For now, photos are noted in the Notes field
                }

                NotificationService.Notify(NotificationSeverity.Success, "Ba≈üarƒ±lƒ±", "Randevunuz ba≈üarƒ±yla olu≈üturuldu!");
                DialogService.Close(true);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hata",
                    response.Message ?? "Randevu olu≈üturulurken bir hata olu≈ütu.");
            }
        }
        catch (InvalidOperationException ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata",
                "L√ºtfen gerekli t√ºm alanlarƒ± doldurun.");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata",
                $"Bir hata olu≈ütu: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        DialogService.Close(false);
    }

    private string GetServiceCardStyle(bool isSelected)
    {
        var border = isSelected ? "var(--rz-primary)" : "transparent";
        var background = isSelected ? "linear-gradient(135deg, #667eea15 0%, #764ba215 100%)" : "white";
        return $"cursor: pointer; border: 2px solid {border}; background: {background}; transition: all 0.3s ease;";
    }

    private string GetEmployeeCardStyle(bool isSelected)
    {
        var border = isSelected ? "var(--rz-primary)" : "transparent";
        var background = isSelected ? "linear-gradient(135deg, #667eea15 0%, #764ba215 100%)" : "white";
        return $"cursor: pointer; border: 2px solid {border}; background: {background}; transition: all 0.3s ease; height: 100%;";
    }
}
