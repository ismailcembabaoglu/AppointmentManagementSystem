@using AppointmentManagementSystem.Application.DTOs
@using AppointmentManagementSystem.BlazorUI.Models
@using AppointmentManagementSystem.BlazorUI.Services.ApiServices
@using Radzen
@inject IAppointmentApiService AppointmentApiService
@inject IBusinessApiService BusinessApiService
@inject IServiceApiService ServiceApiService
@inject IEmployeeApiService EmployeeApiService
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenCard Style="width: 100%; max-width: 700px; min-width: auto;">
    <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
        <!-- Başlık Bölümü -->
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="8px" Style="padding-bottom: 8px; border-bottom: 2px solid var(--rz-primary); flex-wrap: wrap;">
            <RadzenText TextStyle="TextStyle.H4" Style="margin: 0; color: var(--rz-primary); font-weight: 600; text-align: center;">
                📅 Yeni Randevu Oluştur
            </RadzenText>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Vertical" Gap="16px">
            <!-- İşletme Seçimi -->
            <RadzenFormField Text="İşletme" Variant="Variant.Outlined" Style="width: 100%;">
                @if (businessesLoading)
                {
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
                        <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">Yükleniyor...</RadzenText>
                    </RadzenStack>
                }
                else
                {
                    <RadzenDropDown @bind-Value="selectedBusinessId"
                                  Data="businesses"
                                  TextProperty="Name"
                                  ValueProperty="Id"
                                  Placeholder="İşletme seçiniz"
                                  Change="@(args => OnBusinessChanged())"
                                  Style="width: 100%;" />
                }
                @if (!string.IsNullOrEmpty(businessError))
                {
                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-danger); margin-top: 4px; display: block;">
                        ⚠️ @businessError
                    </RadzenText>
                }
            </RadzenFormField>

            <!-- Hizmet Seçimi -->
            <RadzenFormField Text="Hizmet" Variant="Variant.Outlined" Style="width: 100%;">
                @if (servicesLoading)
                {
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
                        <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">Yükleniyor...</RadzenText>
                    </RadzenStack>
                }
                else if (services.Any())
                {
                    <RadzenStack Orientation="Orientation.Vertical" Gap="8px">
                        <RadzenDropDown @bind-Value="appointmentDto.ServiceId"
                                      Data="services"
                                      TextProperty="Name"
                                      ValueProperty="Id"
                                      Placeholder="Hizmet seçiniz"
                                      Change="@(args => OnServiceChanged())"
                                      Style="width: 100%;" />
                        @if (selectedService != null)
                        {
                            <RadzenCard Style="padding: 8px 12px; background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%); border-left: 3px solid var(--rz-primary);">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="16px" AlignItems="AlignItems.Center">
                                    @if (selectedService.Price.HasValue)
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" AlignItems="AlignItems.Center">
                                            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">💰</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600; color: var(--rz-success);">
                                                @selectedService.Price.Value.ToString("C")
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" AlignItems="AlignItems.Center">
                                        <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">⏱️</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600;">
                                            @selectedService.DurationMinutes dk
                                        </RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        }
                    </RadzenStack>
                }
                else if (selectedBusinessId > 0)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter">
                        Bu işletmede henüz hizmet tanımlanmamış.
                    </RadzenAlert>
                }
                @if (!string.IsNullOrEmpty(serviceError))
                {
                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-danger); margin-top: 4px; display: block;">
                        ⚠️ @serviceError
                    </RadzenText>
                }
            </RadzenFormField>

            <!-- Çalışan Seçimi (Opsiyonel) -->
            <RadzenFormField Text="Çalışan (Opsiyonel)" Variant="Variant.Outlined" Style="width: 100%;">
                @if (employeesLoading)
                {
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
                        <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">Yükleniyor...</RadzenText>
                    </RadzenStack>
                }
                else if (employees.Any())
                {
                    <RadzenDropDown @bind-Value="appointmentDto.EmployeeId"
                                  Data="employees"
                                  TextProperty="Name"
                                  ValueProperty="Id"
                                  Placeholder="Çalışan seçiniz (opsiyonel)"
                                  AllowClear="true"
                                  Style="width: 100%;" />
                }
                else if (selectedBusinessId > 0)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter">
                        Bu işletmede henüz çalışan tanımlanmamış.
                    </RadzenAlert>
                }
            </RadzenFormField>

            <!-- Tarih ve Saat -->
            <RadzenRow Gap="12px">
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenFormField Text="Tarih" Variant="Variant.Outlined" Style="width: 100%;">
                        <RadzenDatePicker @bind-Value="appointmentDto.AppointmentDate"
                                        DateFormat="dd.MM.yyyy"
                                        Placeholder="Tarih seçiniz"
                                        Style="width: 100%;" />
                        @if (!string.IsNullOrEmpty(dateError))
                        {
                            <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-danger); margin-top: 4px; display: block;">
                                ⚠️ @dateError
                            </RadzenText>
                        }
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenFormField Text="Saat" Variant="Variant.Outlined" Style="width: 100%;">
                        <RadzenTimeSpanPicker @bind-Value="appointmentDto.StartTime"
                                        Format="HH:mm"
                                        Placeholder="Saat seçiniz"
                                        Style="width: 100%;" />
                        @if (!string.IsNullOrEmpty(timeError))
                        {
                            <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-danger); margin-top: 4px; display: block;">
                                ⚠️ @timeError
                            </RadzenText>
                        }
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>

            <!-- Notlar -->
            <RadzenFormField Text="Notlar (Opsiyonel)" Variant="Variant.Outlined" Style="width: 100%;">
                <RadzenTextArea @bind-Value="appointmentDto.Notes"
                              Rows="3"
                              Placeholder="Randevu ile ilgili notlarınızı buraya yazabilirsiniz..."
                              Style="width: 100%;" />
            </RadzenFormField>
        </RadzenStack>

        <!-- Toplam Süre ve Fiyat Özeti -->
        @if (selectedService != null)
        {
            <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 16px; border-radius: 8px; box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);">
                <RadzenRow Gap="12px">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" JustifyContentMD="JustifyContent.Start">
                            <RadzenText TextStyle="TextStyle.Body1" Style="color: white; font-weight: 500;">
                                ⏱️ Toplam Süre:
                            </RadzenText>
                            <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@($"{selectedService.DurationMinutes} dakika")" Style="font-size: 14px; padding: 6px 12px;" />
                        </RadzenStack>
                    </RadzenColumn>
                    @if (selectedService.Price.HasValue)
                    {
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" JustifyContentMD="JustifyContent.End">
                                <RadzenText TextStyle="TextStyle.Body1" Style="color: white; font-weight: 500;">
                                    💰 Toplam Tutar:
                                </RadzenText>
                                <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@selectedService.Price.Value.ToString("C")" Style="font-size: 14px; padding: 6px 12px; font-weight: 600;" />
                            </RadzenStack>
                        </RadzenColumn>
                    }
                </RadzenRow>
            </RadzenCard>
        }

        <!-- Butonlar -->
        <RadzenRow Gap="12px" Style="padding-top: 8px;">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenButton Text="İptal"
                            ButtonStyle="ButtonStyle.Light"
                            Click="Cancel"
                            Size="ButtonSize.Medium"
                            Style="width: 100%;" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenButton Text="@(isSaving ? "Kaydediliyor..." : "Randevu Oluştur")"
                            ButtonStyle="ButtonStyle.Primary"
                            Click="Save"
                            Disabled="isSaving"
                            Size="ButtonSize.Medium"
                            Style="width: 100%; font-weight: 600;" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public int CustomerId { get; set; } = 0;

    [Parameter]
    public int? PreselectedBusinessId { get; set; } = null;

    private CreateAppointmentDto appointmentDto = new();
    private List<BusinessDto> businesses = new();
    private List<ServiceDto> services = new();
    private List<EmployeeDto> employees = new();
    private int selectedBusinessId = 0;
    private ServiceDto? selectedService = null;
    
    private bool businessesLoading = true;
    private bool servicesLoading = false;
    private bool employeesLoading = false;
    private bool isSaving = false;
    
    // Validation errors
    private string businessError = "";
    private string serviceError = "";
    private string dateError = "";
    private string timeError = "";

    protected override async Task OnInitializedAsync()
    {
        appointmentDto.CustomerId = CustomerId;
        appointmentDto.AppointmentDate = DateTime.Today.AddDays(1); // Varsayılan olarak yarın
        appointmentDto.StartTime = new TimeSpan(10, 0, 0); // Varsayılan saat 10:00
        
        await LoadBusinesses();
        
        if (PreselectedBusinessId.HasValue && PreselectedBusinessId.Value > 0)
        {
            selectedBusinessId = PreselectedBusinessId.Value;
            await OnBusinessChanged();
        }
    }

    private async Task LoadBusinesses()
    {
        businessesLoading = true;
        var response = await BusinessApiService.GetAllBusinessesAsync();
        if (response.Success)
        {
            businesses = response.Data ?? new List<BusinessDto>();
        }
        businessesLoading = false;
    }

    private async Task OnBusinessChanged()
    {
        if (selectedBusinessId > 0)
        {
            appointmentDto.BusinessId = selectedBusinessId;
            
            // Hizmetleri yükle
            await LoadServices();
            
            // Çalışanları yükle
            await LoadEmployees();
        }
        else
        {
            services.Clear();
            employees.Clear();
            appointmentDto.ServiceId = 0;
            appointmentDto.EmployeeId = null;
        }
        
        StateHasChanged();
    }

    private async Task LoadServices()
    {
        servicesLoading = true;
        services.Clear();
        selectedService = null;
        appointmentDto.ServiceId = 0;
        
        var response = await ServiceApiService.GetAllServicesAsync(selectedBusinessId);
        if (response.Success)
        {
            services = response.Data ?? new List<ServiceDto>();
        }
        servicesLoading = false;
    }

    private async Task LoadEmployees()
    {
        employeesLoading = true;
        employees.Clear();
        appointmentDto.EmployeeId = null;
        
        var response = await EmployeeApiService.GetAllEmployeesAsync(selectedBusinessId);
        if (response.Success)
        {
            employees = response.Data ?? new List<EmployeeDto>();
        }
        employeesLoading = false;
    }

    private async Task OnServiceChanged()
    {
        selectedService = services.FirstOrDefault(s => s.Id == appointmentDto.ServiceId);
        StateHasChanged();
    }

    private async Task Save()
    {
        if (!Validate())
            return;

        isSaving = true;
        StateHasChanged();

        try
        {
            var response = await AppointmentApiService.CreateAppointmentAsync(appointmentDto);
            
            if (response.Success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Başarılı", "Randevu başarıyla oluşturuldu.");
                DialogService.Close(true);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hata", response.Message);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", $"Bir hata oluştu: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private bool Validate()
    {
        businessError = "";
        serviceError = "";
        dateError = "";
        timeError = "";

        bool isValid = true;

        if (selectedBusinessId <= 0)
        {
            businessError = "İşletme seçimi gereklidir.";
            isValid = false;
        }

        if (appointmentDto.ServiceId <= 0)
        {
            serviceError = "Hizmet seçimi gereklidir.";
            isValid = false;
        }

        if (appointmentDto.AppointmentDate == default(DateTime))
        {
            dateError = "Tarih seçimi gereklidir.";
            isValid = false;
        }
        else if (appointmentDto.AppointmentDate < DateTime.Today)
        {
            dateError = "Geçmiş tarih seçilemez.";
            isValid = false;
        }

        if (appointmentDto.StartTime == default(TimeSpan))
        {
            timeError = "Saat seçimi gereklidir.";
            isValid = false;
        }

        return isValid;
    }

    private void Cancel()
    {
        DialogService.Close(false);
    }
}
