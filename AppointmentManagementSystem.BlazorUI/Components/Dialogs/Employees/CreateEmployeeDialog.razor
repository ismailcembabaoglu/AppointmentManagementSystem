@using AppointmentManagementSystem.Application.DTOs
@using AppointmentManagementSystem.BlazorUI.Models
@using AppointmentManagementSystem.BlazorUI.Services.ApiServices
@using AppointmentManagementSystem.BlazorUI.Components
@using Radzen
@using Microsoft.AspNetCore.Components.Forms
@using static AppointmentManagementSystem.BlazorUI.Components.FileUploadComponent
@inject IEmployeeApiService EmployeeApiService
@inject IPhotoApiService PhotoApiService
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenStack Orientation="Orientation.Vertical" Gap="20px" Style="padding: 20px;">
    <RadzenText TextStyle="TextStyle.H5" Style="margin: 0; font-weight: 600;">@(isEdit ? "Çalışan Düzenle" : "Yeni Çalışan")</RadzenText>
    
    <RadzenStack Orientation="Orientation.Vertical" Gap="16px">
        <div>
            <RadzenLabel Text="Ad Soyad *" Style="margin-bottom: 8px; display: block;" />
            <RadzenTextBox @bind-Value="employeeDto.Name" Placeholder="Çalışan adını girin" Style="width: 100%;" />
            @if (!string.IsNullOrEmpty(nameError))
            {
                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-danger); margin-top: 4px;">@nameError</RadzenText>
            }
        </div>

        <div>
            <RadzenLabel Text="Uzmanlık" Style="margin-bottom: 8px; display: block;" />
            <RadzenTextBox @bind-Value="employeeDto.Specialization" Placeholder="Uzmanlık alanı" Style="width: 100%;" />
        </div>

        <div>
            <RadzenLabel Text="Açıklama" Style="margin-bottom: 8px; display: block;" />
            <RadzenTextArea @bind-Value="employeeDto.Description" Rows="3" Placeholder="Çalışan açıklaması" Style="width: 100%;" />
        </div>

        <!-- Photo Upload Section -->
        <div>
            <RadzenLabel Text="Fotoğraflar" Style="margin-bottom: 8px; display: block;" />
            <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color); margin-bottom: 8px;">
                Çalışan için birden fazla fotoğraf ekleyebilirsiniz
            </RadzenText>

            <FileUploadComponent Multiple="true"
                               Accept="image/*"
                               MaxFileSize="5242880"
                               OnFilesUploaded="HandlePhotosUploaded" />

            @if (selectedPhotos.Any())
            {
                <div style="margin-top: 12px;">
                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-success);">
                        @selectedPhotos.Count fotoğraf eklendi
                    </RadzenText>
                    <div style="display: flex; flex-wrap: wrap; gap: 8px; margin-top: 8px;">
                        @foreach (var (photo, index) in selectedPhotos.Select((p, i) => (p, i)))
                        {
                            <div style="position: relative; width: 80px; height: 80px;">
                                <img src="@($"data:image/jpeg;base64,{photo}")"
                                     alt="Çalışan fotoğrafı"
                                     style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px; border: 2px solid #e0e0e0;" />
                                <RadzenButton Icon="close"
                                             ButtonStyle="ButtonStyle.Danger"
                                             Size="ButtonSize.ExtraSmall"
                                             Click="@(() => RemovePhoto(index))"
                                             Style="position: absolute; top: -8px; right: -8px; border-radius: 50%; width: 24px; height: 24px; padding: 0;" />
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <div>
            <RadzenCheckBox @bind-Value="employeeDto.IsActive" />
            <RadzenLabel Text="Aktif" Style="margin-left: 8px;" />
        </div>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" JustifyContent="JustifyContent.End" Wrap="FlexWrap.Wrap" Style="margin-top: 8px;">
        <RadzenButton Text="İptal" ButtonStyle="ButtonStyle.Light" Click="Cancel" Style="min-width: 120px;" />
        <RadzenButton Text="@(isEdit ? "Güncelle" : "Oluştur")" 
                    ButtonStyle="ButtonStyle.Primary" 
                    Click="Save" 
                    Disabled="isSaving"
                    Style="min-width: 120px;" />
    </RadzenStack>

    @if (isSaving)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Style="width: 100%;" Mode="ProgressBarMode.Indeterminate" />
    }
</RadzenStack>

@code {
    [Parameter]
    public bool isEdit { get; set; } = false;

    [Parameter]
    public int EmployeeId { get; set; } = 0;

    [Parameter]
    public int? PreselectedBusinessId { get; set; } = null;

    private CreateEmployeeDto employeeDto = new();
    private bool isSaving = false;
    private double uploadProgress = 0;
    
    // Photo handling
    private List<string> selectedPhotos = new();
    private List<string> selectedPhotoBase64 = new();
    private List<string> uploadedPhotos = new();
    
    // Validation errors
    private string nameError = "";

    protected override async Task OnInitializedAsync()
    {
        if (PreselectedBusinessId.HasValue && PreselectedBusinessId.Value > 0)
        {
            employeeDto.BusinessId = PreselectedBusinessId.Value;
        }
        
        employeeDto.IsActive = true;
        
        if (isEdit && EmployeeId > 0)
        {
            await LoadEmployeeForEdit();
        }
    }

    private async Task LoadEmployeeForEdit()
    {
        var response = await EmployeeApiService.GetEmployeeByIdAsync(EmployeeId);
        if (response.Success && response.Data != null)
        {
            var employee = response.Data;
            employeeDto = new CreateEmployeeDto
            {
                Name = employee.Name,
                Specialization = employee.Specialization,
                Description = employee.Description,
                BusinessId = employee.BusinessId,
                IsActive = employee.IsActive
            };
            
            // Load existing photos
            uploadedPhotos = employee.PhotoUrls ?? new List<string>();
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedPhotos.Clear();
        selectedPhotoBase64.Clear();

        var maxFileSize = 5 * 1024 * 1024; // 5MB
        var maxFiles = 10;

        if (e.FileCount > maxFiles)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Uyarı", $"En fazla {maxFiles} fotoğraf yükleyebilirsiniz.");
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxFiles))
        {
            try
            {
                if (file.Size > maxFileSize)
                {
                    NotificationService.Notify(NotificationSeverity.Warning, "Uyarı", 
                        $"{file.Name} dosyası çok büyük. Maksimum 5MB olmalıdır.");
                    continue;
                }

                // Read file as base64
                using var stream = file.OpenReadStream(maxFileSize);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var bytes = ms.ToArray();
                var base64 = Convert.ToBase64String(bytes);
                var dataUrl = $"data:{file.ContentType};base64,{base64}";
                
                selectedPhotos.Add(dataUrl);
                selectedPhotoBase64.Add(base64);
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hata", 
                    $"{file.Name} yüklenirken hata oluştu: {ex.Message}");
            }
        }

        StateHasChanged();
    }

    private void RemovePhoto(int index)
    {
        if (index >= 0 && index < selectedPhotos.Count)
        {
            selectedPhotos.RemoveAt(index);
            selectedPhotoBase64.RemoveAt(index);
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        if (!Validate())
            return;

        isSaving = true;
        uploadProgress = 0;
        StateHasChanged();

        try
        {
            // First create/update the employee
            ApiResponse<EmployeeDto> response;
            
            if (isEdit)
            {
                response = await EmployeeApiService.UpdateEmployeeAsync(EmployeeId, employeeDto);
            }
            else
            {
                response = await EmployeeApiService.CreateEmployeeAsync(employeeDto);
            }

            if (!response.Success)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hata", response.Message);
                return;
            }

            var employeeId = isEdit ? EmployeeId : response.Data!.Id;

            // Upload photos if any selected
            if (selectedPhotoBase64.Any())
            {
                uploadProgress = 10;
                StateHasChanged();

                var totalPhotos = selectedPhotoBase64.Count;
                var uploadedCount = 0;

                foreach (var photoBase64 in selectedPhotoBase64)
                {
                    try
                    {
                        var photoDto = new UploadPhotoDto
                        {
                            Base64Data = photoBase64,
                            FileName = $"employee_{employeeId}_{Guid.NewGuid()}.jpg"
                        };

                        var photoResponse = await PhotoApiService.UploadEmployeePhotoAsync(employeeId, photoDto);
                        
                        if (photoResponse.Success)
                        {
                            uploadedCount++;
                            uploadProgress = 10 + (uploadedCount * 90.0 / totalPhotos);
                            StateHasChanged();
                        }
                    }
                    catch (Exception ex)
                    {
                        NotificationService.Notify(NotificationSeverity.Warning, "Uyarı", 
                            $"Bir fotoğraf yüklenirken hata oluştu: {ex.Message}");
                    }
                }

                if (uploadedCount > 0)
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Başarılı", 
                        $"{uploadedCount} fotoğraf yüklendi.");
                }
            }

            NotificationService.Notify(NotificationSeverity.Success, "Başarılı", 
                isEdit ? "Çalışan başarıyla güncellendi." : "Çalışan başarıyla oluşturuldu.");
            
            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", $"Bir hata oluştu: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            uploadProgress = 0;
            StateHasChanged();
        }
    }

    private bool Validate()
    {
        nameError = "";

        bool isValid = true;

        if (string.IsNullOrWhiteSpace(employeeDto.Name))
        {
            nameError = "Çalışan adı gereklidir.";
            isValid = false;
        }

        if (employeeDto.BusinessId <= 0)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", "İşletme bilgisi bulunamadı.");
            isValid = false;
        }

        return isValid;
    }

    private void Cancel()
    {
        DialogService.Close(false);
    }
}